devtools::document()
devtools::install("c:/Users/manja/OneDrive/Documents/drpop")
library(drpop)
n = 10000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
ss = sample(c('m','f'), n, replace = TRUE, prob = c(0.45, 0.55))
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = sapply(1:n, function(i) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,]), expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,])))})
datacrc = cbind.data.frame(y1, y2, exp(x/2), ss)
p = popsize_cond(List_matrix = datacrc, condvar = 'ss')
summary = plot(popsize_cond = p)
min(7, NA)
devtools::document()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%",
messages = FALSE,
warnings = FALSE
)
library(drpop)
n = 1000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*xi), expit(-0.6 + 0.3*xi)))}))
datacrc = cbind(y1, y2, exp(x/2))
options(warn = -1)
estim <- popsize(List_matrix = datacrc, func = c("logit"), nfolds = 2, K = 2)
# The population size estimates are obtained by
estim$n
# The corresponding variances are
estim$varn
## basic example code
library(drpop)
n = 3000
x = matrix(rnorm(n*3, 2,1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*xi), expit(-0.6 + 0.3*xi)))}))
datacrc = cbind(y1, y2, exp(x/2))
estim <- popsize(List_matrix = datacrc, func = c("logit", "sl"), nfolds = 2, eps = 0.01)
plotci(popsize = estim)$g1
#result = melt(as.data.frame(estim), variable.name = "estimator", value.name = "population_size")
#ggplot(result, aes(x = population_size - n, fill = estimator, color = estimator)) +
#  geom_density(alpha = 0.4) +
#  xlab("Bias on n")
library(drpop)
n = 10000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
ss = sample(c('m','f'), n, replace = TRUE, prob = c(0.45, 0.55))
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = sapply(1:n, function(i) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,]), expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,])))})
datacrc = cbind.data.frame(y1, y2, exp(x/2), ss)
p = popsize_cond(List_matrix = datacrc, condvar = 'ss')
summary = plotci(popsize_cond = p)
p
n = 10000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
ss = sample(c('m','f'), n, replace = TRUE, prob = c(0.45, 0.55))
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = sapply(1:n, function(i) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,]), expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,])))})
datacrc = cbind.data.frame(y1, y2, exp(x/2), ss)
p = popsize_cond(List_matrix = datacrc, condvar = 'ss')
summary = plotci(popsize_cond = p)
p
head(datacrc)
p = popsize_cond(List_matrix = datacrc, condvar = 'ss')
p = popsize_cond(List_matrix = datacrc, condvar = 'ss', funcname = c("logit"))
p
table(datacrc$ss)
pf = popsize(List_matrix = datacrc[datacrc$ss == "f", names(datacrc)!="ss"])
pf
List_mat
List_matrix = datacrc
K = 2
condvar = 'ss'
l = ncol(List_matrix) - K
n = nrow(List_matrix)
List_matrix = as.data.frame(List_matrix)
#N = number of observed or captured units
N = nrow(List_matrix)
condvar_vec = unique(List_matrix[,condvar + K])
condvar = which(colnames(List_matrix) == condvar) - K
condvar_vec = unique(List_matrix[,condvar + K])
psi = numeric(0)
sigma2 = numeric(0)
n = numeric(0)
varn = numeric(0)
N = numeric(0)
cin.l = numeric(0)
cin.u = numeric(0)
cvar
condvar_vec
cvar = "f"
List_matrixsub = List_matrix[List_matrix[,K + condvar] == cvar, -c(K + condvar)]
est = try(popsize(List_matrix = List_matrixsub, K = K, filterrows = filterrows, funcname = funcname, nfolds = 2, twolist = twolist, eps = eps, iter = iter, sl.lib = sl.lib, Nmin = Nmin, num_cores = num_cores), silent = TRUE)
class(est)
est = popsize(List_matrix = List_matrixsub, K = K, filterrows = filterrows, funcname = funcname, nfolds = 2, twolist = twolist, eps = eps, iter = iter, sl.lib = sl.lib, Nmin = Nmin, num_cores = num_cores)
filterrows = TRUE
est = popsize(List_matrix = List_matrixsub, K = K, filterrows = filterrows, funcname = funcname, nfolds = 2, twolist = twolist, eps = eps, iter = iter, sl.lib = sl.lib, Nmin = Nmin, num_cores = num_cores)
#' @references van der Laan, M. J., Polley, E. C. and Hubbard, A. E. (2008) Super Learner, Statistical Applications of Genetics and Molecular Biology, 6, article 25.
#' @examples
#' data = matrix(sample(c(0,1), 2000, replace = TRUE), ncol = 2)
#' x = matrix(rnorm(nrow(data)*3, 2,1), nrow = nrow(data))
#' ss = sample(1:6, nrow(data), replace = TRUE)
#'
#' data = cbind(data, x, ss)
#' psin_estimate = popsize_cond(List_matrix = data, funcname = c("logit", "sl"), condvar = 'ss', nfolds = 2, twolist = FALSE, eps = 0.005)
#' #this returns the plug-in, the bias-corrected and the tmle estimate for the two models conditioned on column ss
#' @export
popsize_cond <- function(List_matrix, K = 2, filterrows = TRUE, funcname = c("logit"), condvar, nfolds = 5, twolist = FALSE, eps = 0.005, iter = 50, sl.lib = c("SL.gam", "SL.glm", "SL.glm.interaction", "SL.ranger", "SL.glmnet"), Nmin, num_cores){
l = ncol(List_matrix) - K
n = nrow(List_matrix)
stopifnot(!is.null(dim(List_matrix)))
stopifnot(!missing(condvar))
stopifnot(is.element(condvar, colnames(List_matrix)))
List_matrix = as.data.frame(List_matrix)
#N = number of observed or captured units
N = nrow(List_matrix)
if(missing(Nmin)){
print(missing(Nmin))
}
print(is.na(Nmin))
conforminglists = apply(List_matrix[,1:K], 2, function(col){return(setequal(col, c(0,1)))})
if(sum(conforminglists) < 2){
stop("Data is not in the required format or lists are degenerate.")
return(NULL)
}
if(sum(conforminglists) < K){
Message(cat("Lists ", which(conforminglists == FALSE), " are not in the required format."))
}
if(!missing(condvar)){
if(is.character(condvar)){
condvar = which(colnames(List_matrix) == condvar) - K
}
}
condvar_vec = unique(List_matrix[,condvar + K])
psi = numeric(0)
sigma2 = numeric(0)
n = numeric(0)
varn = numeric(0)
N = numeric(0)
cin.l = numeric(0)
cin.u = numeric(0)
for(cvar in condvar_vec){
List_matrixsub = List_matrix[List_matrix[,K + condvar] == cvar, -c(K + condvar)]
est = try(popsize(List_matrix = List_matrixsub, K = K, filterrows = filterrows, funcname = funcname, nfolds = 2, twolist = twolist, eps = eps, iter = iter, sl.lib = sl.lib, Nmin = Nmin, num_cores = num_cores), silent = TRUE)
if("try-error" %in% class(est)){
next
}
if(ncol(est$psi) == 1){
next
}
psi = rbind(psi, data.frame(listpair = rownames(est$psi), est$psi, condvar = cvar), make.row.names = FALSE)
sigma2 = rbind(sigma2, data.frame(listpair = rownames(est$psi), est$sigma2, condvar = cvar), make.row.names = FALSE)
n = rbind(n, data.frame(listpair = rownames(est$psi), est$n, condvar = cvar), make.row.names = FALSE)
varn = rbind(varn, data.frame(listpair = rownames(est$psi), est$varn, condvar = cvar), make.row.names = FALSE)
cin.l = rbind(cin.l, data.frame(listpair = rownames(est$psi), est$cin.l, condvar = cvar), make.row.names = FALSE)
cin.u = rbind(cin.u, data.frame(listpair = rownames(est$psi), est$cin.u, condvar = cvar), make.row.names = FALSE)
}
return(list(psi = psi, sigma2 = sigma2, n = n, varn = varn, N = N, cin.l = cin.l, cin.u = cin.u))
}
popsize_cond(List_matrix = datacrc, condvar = 'ss', funcname = c("logit"))
#' @references van der Laan, M. J., Polley, E. C. and Hubbard, A. E. (2008) Super Learner, Statistical Applications of Genetics and Molecular Biology, 6, article 25.
#' @examples
#' data = matrix(sample(c(0,1), 2000, replace = TRUE), ncol = 2)
#' x = matrix(rnorm(nrow(data)*3, 2,1), nrow = nrow(data))
#' ss = sample(1:6, nrow(data), replace = TRUE)
#'
#' data = cbind(data, x, ss)
#' psin_estimate = popsize_cond(List_matrix = data, funcname = c("logit", "sl"), condvar = 'ss', nfolds = 2, twolist = FALSE, eps = 0.005)
#' #this returns the plug-in, the bias-corrected and the tmle estimate for the two models conditioned on column ss
#' @export
popsize_cond <- function(List_matrix, K = 2, filterrows = TRUE, funcname = c("logit"), condvar, nfolds = 5, twolist = FALSE, eps = 0.005, iter = 50, sl.lib = c("SL.gam", "SL.glm", "SL.glm.interaction", "SL.ranger", "SL.glmnet"), Nmin, num_cores){
l = ncol(List_matrix) - K
n = nrow(List_matrix)
stopifnot(!is.null(dim(List_matrix)))
stopifnot(!missing(condvar))
stopifnot(is.element(condvar, colnames(List_matrix)))
List_matrix = as.data.frame(List_matrix)
#N = number of observed or captured units
N = nrow(List_matrix)
print(c(missing(Nmin), is.null(Nmin), is.na(Nmin)))
if(missing(Nmin)){
print(missing(Nmin))
}
conforminglists = apply(List_matrix[,1:K], 2, function(col){return(setequal(col, c(0,1)))})
if(sum(conforminglists) < 2){
stop("Data is not in the required format or lists are degenerate.")
return(NULL)
}
if(sum(conforminglists) < K){
Message(cat("Lists ", which(conforminglists == FALSE), " are not in the required format."))
}
if(!missing(condvar)){
if(is.character(condvar)){
condvar = which(colnames(List_matrix) == condvar) - K
}
}
condvar_vec = unique(List_matrix[,condvar + K])
psi = numeric(0)
sigma2 = numeric(0)
n = numeric(0)
varn = numeric(0)
N = numeric(0)
cin.l = numeric(0)
cin.u = numeric(0)
for(cvar in condvar_vec){
List_matrixsub = List_matrix[List_matrix[,K + condvar] == cvar, -c(K + condvar)]
est = try(popsize(List_matrix = List_matrixsub, K = K, filterrows = filterrows, funcname = funcname, nfolds = 2, twolist = twolist, eps = eps, iter = iter, sl.lib = sl.lib, Nmin = Nmin, num_cores = num_cores), silent = TRUE)
if("try-error" %in% class(est)){
next
}
if(ncol(est$psi) == 1){
next
}
psi = rbind(psi, data.frame(listpair = rownames(est$psi), est$psi, condvar = cvar), make.row.names = FALSE)
sigma2 = rbind(sigma2, data.frame(listpair = rownames(est$psi), est$sigma2, condvar = cvar), make.row.names = FALSE)
n = rbind(n, data.frame(listpair = rownames(est$psi), est$n, condvar = cvar), make.row.names = FALSE)
varn = rbind(varn, data.frame(listpair = rownames(est$psi), est$varn, condvar = cvar), make.row.names = FALSE)
cin.l = rbind(cin.l, data.frame(listpair = rownames(est$psi), est$cin.l, condvar = cvar), make.row.names = FALSE)
cin.u = rbind(cin.u, data.frame(listpair = rownames(est$psi), est$cin.u, condvar = cvar), make.row.names = FALSE)
}
return(list(psi = psi, sigma2 = sigma2, n = n, varn = varn, N = N, cin.l = cin.l, cin.u = cin.u))
}
popsize_cond(List_matrix = datacrc, condvar = 'ss', funcname = c("logit"))
min(7, NA)
min(7, NA, na.rm = TRUE)
min(7, NA, rm.na = TRUE)
devtools::document()
rm(list = c("popsize_cond"))
devtools::document()
library(drpop)
n = 10000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
ss = sample(c('m','f'), n, replace = TRUE, prob = c(0.45, 0.55))
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = sapply(1:n, function(i) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,]), expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,])))})
datacrc = cbind.data.frame(y1, y2, exp(x/2), ss)
p = popsize_cond(List_matrix = datacrc, condvar = 'ss')
summary = plotci(popsize_cond = p)
p
is.null(p)
is.null(p$psi)
length(p$psi)
length(p)
devti
devtools::document()
devtools::install("c:/Users/manja/OneDrive/Documents/drpop")
library(drpop)
n = 10000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
ss = sample(c('m','f'), n, replace = TRUE, prob = c(0.45, 0.55))
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = sapply(1:n, function(i) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,]), expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,])))})
datacrc = cbind.data.frame(y1, y2, exp(x/2), ss)
p = popsize_cond(List_matrix = datacrc, condvar = 'ss')
?Error
devtools::document()
devtools::install("c:/Users/manja/OneDrive/Documents/drpop")
library(drpop)
n = 10000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
ss = sample(c('m','f'), n, replace = TRUE, prob = c(0.45, 0.55))
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = sapply(1:n, function(i) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,]), expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,])))})
datacrc = cbind.data.frame(y1, y2, exp(x/2), ss)
p = popsize_cond(List_matrix = datacrc, condvar = 'ss')
summary = plotci(popsize_cond = p)
p
n = 10000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
ss = sample(c('m','f'), n, replace = TRUE, prob = c(0.45, 0.55))
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = sapply(1:n, function(i) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,]), expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,])))})
datacrc = cbind.data.frame(y1, y2, exp(x/2), ss)
p = popsize_cond(List_matrix = datacrc, condvar = 'ss')
List_matrix = datacrc, condvar = 'ss'
List_matrix = datacrc; condvar = 'ss'
K = 2
filterrows = TRUE
funcname = c("logit")
nfolds = 5
twolist = FALSE
iter = 50
eps = 0.005
Nmin = NA
num_cores = NA
l = ncol(List_matrix) - K
n = nrow(List_matrix)
List_matrix = as.data.frame(List_matrix)
#N = number of observed or captured units
N = nrow(List_matrix)
conforminglists = apply(List_matrix[,1:K], 2, function(col){return(setequal(col, c(0,1)))})
condvar = which(colnames(List_matrix) == condvar) - K
condvar_vec = unique(List_matrix[,condvar + K])
psi = numeric(0)
sigma2 = numeric(0)
n = numeric(0)
varn = numeric(0)
N = numeric(0)
cin.l = numeric(0)
cin.u = numeric(0)
cvar = 'f'
List_matrixsub = List_matrix[List_matrix[,K + condvar] == cvar, -c(K + condvar)]
est = popsize(List_matrix = List_matrixsub, K = K, filterrows = filterrows, funcname = funcname, nfolds = 2, twolist = twolist, eps = eps, iter = iter, sl.lib = sl.lib, Nmin = Nmin, num_cores = num_cores)
devtools::document()
devtools::install("c:/Users/manja/OneDrive/Documents/drpop")
library(drpop)
n = 10000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
ss = sample(c('m','f'), n, replace = TRUE, prob = c(0.45, 0.55))
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = sapply(1:n, function(i) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,]), expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,])))})
datacrc = cbind.data.frame(y1, y2, exp(x/2), ss)
p = popsize_cond(List_matrix = datacrc, condvar = 'ss')
summary = plotci(popsize_cond = p)
p
popsize_cond = p
psi <- reshape2::melt(popsize_cond$psi, id.vars = c("listpair", "condvar"), value.name = "psi")%>% separate(variable, c("model", "method"))
sigma2 <- reshape2::melt(popsize_cond$sigma2, id.vars = c("listpair", "condvar"), value.name = "sigma2")%>% separate(variable, c("model", "method"))
n <- reshape2::melt(popsize_cond$n, id.vars = c("listpair", "condvar"), value.name = "n")%>% separate(variable, c("model", "method"))
varn <- reshape2::melt(popsize_cond$varn, id.vars = c("listpair", "condvar"), value.name = "varn")%>% separate(variable, c("model", "method"))
N <- popsize_cond$N
cin.l <- reshape2::melt(popsize_cond$cin.l, id.vars = c("listpair", "condvar"), value.name = "cin.l")%>% separate(variable, c("model", "method"))
cin.u <- reshape2::melt(popsize_cond$cin.u, id.vars = c("listpair", "condvar"), value.name = "cin.u")%>% separate(variable, c("model", "method"))
resultcond <- merge(psi, sigma2, by = c("listpair", "condvar", "model", "method")) %>%
merge(n, by = c("listpair", "condvar", "model", "method")) %>%
merge(varn, by = c("listpair", "condvar", "model", "method")) %>%
merge(cin.l, by = c("listpair", "condvar", "model", "method")) %>%
merge(cin.u, by = c("listpair", "condvar", "model", "method")) %>%
merge(N, by = "condvar")
dim(psi)
merge(psi, sigma2, by = c("listpair", "condvar", "model", "method"))
merge(psi, sigma2, by = c("listpair", "condvar", "model", "method")) %>%
merge(n, by = c("listpair", "condvar", "model", "method")) %>%
merge(varn, by = c("listpair", "condvar", "model", "method"))
merge(psi, sigma2, by = c("listpair", "condvar", "model", "method")) %>%
merge(n, by = c("listpair", "condvar", "model", "method")) %>%
merge(varn, by = c("listpair", "condvar", "model", "method")) %>%
merge(cin.l, by = c("listpair", "condvar", "model", "method"))
merge(psi, sigma2, by = c("listpair", "condvar", "model", "method")) %>%
merge(n, by = c("listpair", "condvar", "model", "method")) %>%
merge(varn, by = c("listpair", "condvar", "model", "method")) %>%
merge(cin.l, by = c("listpair", "condvar", "model", "method")) %>%
merge(cin.u, by = c("listpair", "condvar", "model", "method"))
head(N)
N <- popsize_cond$N
N
p
p$psi
p$n
rm(list = c("popsize_cond"))
devtools::document()
devtools::document()
devtools::install("c:/Users/manja/OneDrive/Documents/drpop")
library(drpop)
n = 10000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
ss = sample(c('m','f'), n, replace = TRUE, prob = c(0.45, 0.55))
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = sapply(1:n, function(i) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,]), expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,])))})
datacrc = cbind.data.frame(y1, y2, exp(x/2), ss)
p = popsize_cond(List_matrix = datacrc, condvar = 'ss')
summary = plotci(popsize_cond = p)
summary$g2 + geom_hline(yintercept = table(ss), color = "brown", linetype = "dashed")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%",
messages = FALSE,
warnings = FALSE
)
library(drpop)
n = 1000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*xi), expit(-0.6 + 0.3*xi)))}))
datacrc = cbind(y1, y2, exp(x/2))
options(warn = -1)
estim <- popsize(List_matrix = datacrc, func = c("logit"), nfolds = 2, K = 2)
# The population size estimates are obtained by
estim$n
# The corresponding variances are
estim$varn
## basic example code
library(drpop)
n = 3000
x = matrix(rnorm(n*3, 2,1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*xi), expit(-0.6 + 0.3*xi)))}))
datacrc = cbind(y1, y2, exp(x/2))
estim <- popsize(List_matrix = datacrc, func = c("logit", "sl"), nfolds = 2, eps = 0.01)
plotci(popsize = estim)$g1
#result = melt(as.data.frame(estim), variable.name = "estimator", value.name = "population_size")
#ggplot(result, aes(x = population_size - n, fill = estimator, color = estimator)) +
#  geom_density(alpha = 0.4) +
#  xlab("Bias on n")
library(drpop)
n = 10000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
ss = sample(c('m','f'), n, replace = TRUE, prob = c(0.45, 0.55))
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = sapply(1:n, function(i) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,]), expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,])))})
datacrc = cbind.data.frame(y1, y2, exp(x/2), ss)
p = popsize_cond(List_matrix = datacrc, condvar = 'ss')
summary = plotci(popsize_cond = p)
summary$g2 + geom_hline(yintercept = table(ss), color = "brown", linetype = "dashed")

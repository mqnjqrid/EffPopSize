cin.l = N*psiinv_summary - 1.96*sqrt(N^2*var_summary + N*psiinv_summary*(psiinv_summary - 1)),
cin.u = N*psiinv_summary + 1.96 *sqrt(N^2*var_summary + N*psiinv_summary*(psiinv_summary - 1))
))
}
}
psi = numeric(0)
sigma2 = numeric(0)
n = numeric(0)
varn = numeric(0)
N = numeric(0)
for(cvar in condvar_vec){
List_matrixsub = List_matrix[List_matrix[,K+condvar] == cvar,]
est = psinhat(List_matrix = List_matrixsub, K = K, funcname = funcname, nfolds = 2, twolist = twolist, eps = eps, iter = iter, sl.lib = sl.lib)
psi = rbind(psi, data.frame(est$psi, cvar))
sigma2 = rbind(sigma2, data.frame(est$sigma2, cvar))
n = rbind(n, data.frame(est$n, cvar))
varn = rbind(varn, data.frame(est$varn, cvar))
N = rbind(N, data.frame(est$N, cvar))
}
tmle = function(datmat, iter = 100, eps = 0.005, eps_stop = 0.00001, twolist = FALSE, K = 2){
if(!prod(c("yi", "yj", "yij", "q10", "q02", "q12") %in% colnames(datmat))){
stop("datmat misses one or more of the following columns: \t (yi, yj, yij, q10, q02, q12).")
return(list(error = TRUE))
}
expit = function(x) {
exp(x)/(1 + exp(x))
}
logit = function(x) {
log(x/(1 - x))
}
epsilon_error = 1
cnt = 0
while (abs(epsilon_error) > eps_stop){
cnt = cnt + 1
if (cnt > iter){break}
########################### model 1 for q12
dat1 = cbind(datmat$yij, logit(datmat$q12), (datmat$q10 + datmat$q12)/datmat$q12
+ (datmat$q02 + datmat$q12)/datmat$q12
- (datmat$q10 + datmat$q12)*(datmat$q02 + datmat$q12)/datmat$q12^2 )
colnames(dat1) = c("yij", "logitq12", "ratio")
dat1 = as.data.frame(dat1)
mod1 = try(glm(yij ~ -1 + offset(logitq12) + ratio
, family = binomial(link = logit), data = dat1, na.action = na.omit), silent = TRUE)
if (!("try-error" %in% class(mod1))){
datmat[,"q12"] = predict(mod1, newdata = dat1, type = "response")
}
datmat$q12 = pmax(pmin(datmat$q12, 1), eps)
########################### model 2 for q1
dat2 = cbind(datmat$yi*(1 - datmat$yj), logit(datmat$q10), (datmat$q02 + datmat$q12)/datmat$q12)
colnames(dat2) = c("yi0", "logitq10", "ratio")
dat2 = as.data.frame(dat2)
mod2 = try(glm(yi0 ~ -1 + offset(logitq10) + ratio, family = binomial(link = logit), data = dat2, na.action = na.omit), silent = TRUE)
if (!("try-error" %in% class(mod2))){
datmat$q10 = predict(mod2, newdata = dat2, type = "response")
datmat[,"q10"] = pmin(datmat[,"q10"], 1 - datmat$q12)
}
datmat$q10 = pmax(pmin(datmat$q10, 1), eps)
########################### model 3 for q2
if (K > 2 | twolist == FALSE){
dat3 = cbind(datmat$yj*(1 - datmat$yi), logit(datmat$q02), (datmat$q10 + datmat$q12)/datmat$q12)
colnames(dat3) = c("y0j", "logitq02", "ratio")
dat3 = as.data.frame(dat3)
mod3 = try(glm(y0j ~ -1 + offset(logitq02) + ratio, family = binomial(link = logit), data = dat3, na.action = na.omit), silent = TRUE)
if (!("try-error" %in% class(mod3))){
datmat$q02 = predict(mod3, newdata = dat3, type = "response")
datmat[,"q02"] = pmin(datmat[,"q02"], 1 - datmat$q10 - datmat$q12)
}
}else{
mod3 = mod2
datmat[,"q02"] = pmax(0, 1 - datmat$q10 - datmat$q12)
}
datmat$q02 = pmax(pmin(datmat$q02, 1), eps)
epsilon_error = max(abs(c(mod2$coefficients, mod3$coefficients, mod1$coefficients)))
}
return(list(error = epsilon_error > 1, datmat = datmat))
}
for(cvar in condvar_vec){
List_matrixsub = List_matrix[List_matrix[,K+condvar] == cvar,]
est = psinhat(List_matrix = List_matrixsub, K = K, funcname = funcname, nfolds = 2, twolist = twolist, eps = eps, iter = iter, sl.lib = sl.lib)
psi = rbind(psi, data.frame(est$psi, cvar))
sigma2 = rbind(sigma2, data.frame(est$sigma2, cvar))
n = rbind(n, data.frame(est$n, cvar))
varn = rbind(varn, data.frame(est$varn, cvar))
N = rbind(N, data.frame(est$N, cvar))
}
psi
n
cvar
List_matrixsub = List_matrix[List_matrix[,K+condvar] == cvar,]
est = psinhat(List_matrix = List_matrixsub, K = K, funcname = funcname, nfolds = 2, twolist = twolist, eps = eps, iter = iter, sl.lib = sl.lib)
est = psinhat(List_matrix = List_matrixsub, K = K, funcname = funcname, nfolds = 2, twolist = twolist, eps = eps, iter = iter, sl.lib = sl.lib)
funcname = c("logit")
for(cvar in condvar_vec){
List_matrixsub = List_matrix[List_matrix[,K+condvar] == cvar,]
est = psinhat(List_matrix = List_matrixsub, K = K, funcname = funcname, nfolds = 2, twolist = twolist, eps = eps, iter = iter, sl.lib = sl.lib)
psi = rbind(psi, data.frame(est$psi, cvar))
sigma2 = rbind(sigma2, data.frame(est$sigma2, cvar))
n = rbind(n, data.frame(est$n, cvar))
varn = rbind(varn, data.frame(est$varn, cvar))
N = rbind(N, data.frame(est$N, cvar))
}
List_matrix = List_matrixsub
#renaming the columns of List_matrix for ease of use
colnames(List_matrix) = c(paste("L", 1:K, sep = ''), paste("x", 1:(ncol(List_matrix) - K), sep = ''))
psiinv_summary = matrix(0, nrow = K*(K - 1)/2, ncol = 3*length(funcname))
colnames(psiinv_summary) = paste(rep(funcname, each = 3), c("PI", "BC", "TMLE"), sep = '.')
psiinv_summary = as.data.frame(psiinv_summary)
psiinv_summary$listpair = unlist(sapply(1:(K - 1), function(k) {
sapply((k + 1):K, function(s) {
return(paste(k, ", ", s, sep = ''))
})}))
var_summary = psiinv_summary
ifvals = matrix(0, nrow = N*K*(K-1)/2, ncol = length(funcname))
colnames(ifvals) = funcname
ifvals = as.data.frame(ifvals)
ifvals$listpair = rep(rownames(psiinv_summary), each = N)
l = ncol(List_matrix) - K
n = nrow(List_matrix)
stopifnot(!is.null(dim(List_matrix)))
List_matrix = na.omit(List_matrix)
#removing all rows with only 0's
List_matrix = List_matrix[which(rowSums(List_matrix[,1:K]) > 0),]
List_matrix = as.data.frame(List_matrix)
#N = number of observed or captured units
N = nrow(List_matrix)
conforminglists = apply(List_matrix[,1:K], 2, function(col){return(setequal(col, c(0,1)))})
#renaming the columns of List_matrix for ease of use
colnames(List_matrix) = c(paste("L", 1:K, sep = ''), paste("x", 1:(ncol(List_matrix) - K), sep = ''))
psiinv_summary = matrix(0, nrow = K*(K - 1)/2, ncol = 3*length(funcname))
colnames(psiinv_summary) = paste(rep(funcname, each = 3), c("PI", "BC", "TMLE"), sep = '.')
psiinv_summary = as.data.frame(psiinv_summary)
psiinv_summary$listpair = unlist(sapply(1:(K - 1), function(k) {
sapply((k + 1):K, function(s) {
return(paste(k, ", ", s, sep = ''))
})}))
var_summary = psiinv_summary
ifvals = matrix(0, nrow = N*K*(K-1)/2, ncol = length(funcname))
colnames(ifvals) = funcname
ifvals = as.data.frame(ifvals)
ifvals$listpair = rep(rownames(psiinv_summary), each = N)
nuis = matrix(0, nrow = N*K*(K-1)/2, ncol = 3*length(funcname))
colnames(nuis) = paste(rep(funcname, each = 3), c("q12", "q1", "q2"), sep = '.')
nuis = as.data.frame(nuis)
nuis$listpair = rownames(ifvals)
nuistmle = nuis
permutset = sample(1:N, N, replace = FALSE)
i;j
psiinvmat = matrix(NA, nrow = nfolds, ncol = 3*length(funcname))
colnames(psiinvmat) = paste(rep(funcname, each = 3), c("PI", "BC", "TMLE"), sep = '.')
varmat = psiinvmat
ifvalsfold = matrix(0, nrow = N, ncol = length(funcname))
colnames(ifvalsfold) = funcname
nuisfold = matrix(0, nrow = N, ncol = 3*length(funcname))
colnames(nuisfold) = paste(rep(funcname, each = 3), c("q12", "q1", "q2"), sep = '.')
nuistmlefold = nuisfold
folds
sbset = ((folds - 1)*ceiling(N/nfolds) + 1):(folds*ceiling(N/nfolds))
sbset = sbset[sbset <= N]
List1 = List_matrix[permutset[-sbset],]
List2 = List_matrix[permutset[sbset],]
yi = List2[,paste("L", i, sep = '')]
yj = List2[,paste("L", j, sep = '')]
func
q12 = qhat$q12
q1 = pmin(pmax(q12, qhat$q1), 1)
q2 = pmax(q12/q1, pmin(qhat$q2, 1 + q12 - q1, 1))
nuisfold[sbset, paste(func, c("q12", "q1", "q2"), sep = '.')] = cbind(q12, q1, q2)
gammainvhat = q1*q2/q12
psiinvhat = mean(gammainvhat, na.rm = TRUE)
phihat = gammainvhat*(yj/q2 + yi/q1 - yi*yj/q12) - psiinvhat
head(nuisfold)
dim(nuisfold[sbset, paste(func, c("q12", "q1", "q2"), sep = '.')])
head(nuisfold[sbset, paste(func, c("q12", "q1", "q2"), sep = '.')])
dim(cbind(q12, q1, q2))
class(qhat)
length(qhat$q12)
length(sbset)
dim(List1)
dim(List2)
qhat = try(get(paste0("qhat_", func))(List1, List2, K, i, j, eps, sl.lib = sl.lib), silent = TRUE)
length(qhat$q12)
qhat = try(get(paste0("qhat_", func))(List1, List2, K, i, j, eps, sl.lib = sl.lib), silent = TRUE)
q12 = qhat$q12
q1 = pmin(pmax(q12, qhat$q1), 1)
q2 = pmax(q12/q1, pmin(qhat$q2, 1 + q12 - q1, 1))
nuisfold[sbset, paste(func, c("q12", "q1", "q2"), sep = '.')] = cbind(q12, q1, q2)
gammainvhat = q1*q2/q12
psiinvhat = mean(gammainvhat, na.rm = TRUE)
phihat = gammainvhat*(yj/q2 + yi/q1 - yi*yj/q12) - psiinvhat
ifvalsfold[sbset, func] = phihat
Qnphihat = mean(phihat, na.rm = TRUE)
psiinvhatq = max(psiinvhat + Qnphihat, 1)
psiinvmat[folds, colsubset][1:2] = c(psiinvhat, psiinvhatq)
sigmasq = var(phihat, na.rm = TRUE)
varmat[folds, colsubset][1:2] = sigmasq/N
datmat = as.data.frame(cbind(yi, yj, yi*yj, q1 - q12, q2 - q12, q12))
datmat[,4:6] = cbind(apply(datmat[,4:6], 2, function(u) {return(pmin(pmax(u, eps), 1 - eps))}))
colnames(datmat) = c("yi", "yj", "yij", "q10", "q02", "q12")
tmle = tmle(datmat = datmat, iter = iter, eps = eps, eps_stop = 0.00001, twolist = twolist, K = K)
datmat = tmle$datmat
q12 = pmax(datmat$q12, eps)
q1 = pmin(datmat$q12 + datmat$q10, 1)
q2 = pmax(pmin(datmat$q12 + datmat$q02, 1 + q12 - q1, 1), q12/q1)
nuistmlefold[sbset, paste(func, c("q12", "q1", "q2"), sep = '.')] = cbind(q12, q1, q2)
gammainvhat = q1*q2/q12
psiinvhat = mean(gammainvhat, na.rm = TRUE)
phihat = gammainvhat*(yi/q1 + yj/q2 - yi*yj/q12) - psiinvhat
Qnphihat = mean(phihat, na.rm = TRUE)
psiinvmat[folds,colsubset][3] = psiinvhat
sigmasq = var(phihat, na.rm = TRUE)
varmat[folds,colsubset][3] = sigmasq/N
psiinvmat
colMeans(psiinvmat, na.rm = TRUE)
psiinv_summary[psiinv_summary$listpair == paste(i, ", ", j, sep = ''), setdiff(names(psiinv_summary), "listpair")]
psiinv_summary[psiinv_summary$listpair == paste(i, ", ", j, sep = ''), setdiff(names(psiinv_summary), "listpair")] = colMeans(psiinvmat, na.rm = TRUE)
var_summary[var_summary$listpair == paste(i, ", ", j, sep = ''), setdiff(names(var_summary), "listpair")] = colMeans(varmat, na.rm = TRUE)
ifvals[ifvals$listpair == paste(i, ", ", j, sep = ''), setdiff(names(ifvals), "listpair")] = ifvalsfold
nuis[nuis$listpair == paste(i, ", ", j, sep = ''), setdiff(names(nuis), "listpair")] = nuisfold
nuistmle[nuistmle$listpair == paste(i, ", ", j, sep = ''), setdiff(names(nuistmle), "listpair")] = nuistmlefold
#' data = matrix(sample(c(0,1), 2000, replace = TRUE), ncol = 2)
#' x = matrix(rnorm(nrow(data)*3, 2,1), nrow = nrow(data))
#'
#' psin_estimate = psinhat(List_matrix = data)
#' #this returns the basic plug-in estimate since covariates are absent.
#'
#' data = cbind(data, x)
#' psin_estimate = psinhat(List_matrix = data, funcname = c("logit", "sl"), nfolds = 2, twolist = FALSE, eps = 0.005)
#' #this returns the plug-in, the bias-corrected and the tmle estimate for the two models
#' @export
psinhat = function(List_matrix, K = 2, funcname = c("logit"), nfolds = 5, twolist = FALSE, eps = 0.005, iter = 50, sl.lib = c("SL.gam", "SL.glm", "SL.glm.interaction", "SL.ranger", "SL.glmnet")){
l = ncol(List_matrix) - K
n = nrow(List_matrix)
stopifnot(!is.null(dim(List_matrix)))
stopifnot(K >= 2)
stopifnot(nrow(List_matrix)>1)
stopifnot(ncol(List_matrix) >= 2)
stopifnot(((ncol(List_matrix) == K)&(nrow(List_matrix)>50)) | (nrow(List_matrix) > 0))
List_matrix = na.omit(List_matrix)
#removing all rows with only 0's
List_matrix = List_matrix[which(rowSums(List_matrix[,1:K]) > 0),]
List_matrix = as.data.frame(List_matrix)
#N = number of observed or captured units
N = nrow(List_matrix)
conforminglists = apply(List_matrix[,1:K], 2, function(col){return(setequal(col, c(0,1)))})
if(sum(conforminglists) < 2){
stop("Data is not in the required format or lists are degenerate.")
return(NULL)
}
if(sum(conforminglists) < K){
Message(cat("Lists ", which(conforminglists == FALSE), " are not in the required format."))
}
if(l == 0){
#renaming the columns of List_matrix for ease of use
colnames(List_matrix) = c(paste("L", 1:K, sep = ''))
psiinv_summary = matrix(0, nrow = K*(K - 1)/2, ncol = 1)
rownames(psiinv_summary) = unlist(sapply(1:(K - 1), function(k) {
sapply((k + 1):K, function(s) {
return(paste(k, ", ", s, sep = ''))
})}))
colnames(psiinv_summary) =  c("PI")
var_summary = psiinv_summary
for(i in 1:(K - 1)){
if(!setequal(List_matrix[,i], c(0,1))){
next
}
for(j in (i + 1):K){
if(!setequal(List_matrix[,j], c(0,1))){
next
}
q1 = mean(List_matrix[,i])
q2 = mean(List_matrix[,j])
q12 = mean(List_matrix[,i]*List_matrix[,j])
psiinv_summary[paste(i, ", ", j, sep = ''),] = q1*q2/q12
var_summary[paste(i, ", ", j, sep = ''),] = q1*q2*(q1*q2 - q12)*(1 - q12)/q12^3/N
ifvals = NULL
}
}
return(list(psi = 1/psiinv_summary, sigma2 = N*var_summary, n = N*psiinv_summary,
varn = N^2*var_summary + N*psiinv_summary*(psiinv_summary - 1), N = N
))
}else{
#renaming the columns of List_matrix for ease of use
colnames(List_matrix) = c(paste("L", 1:K, sep = ''), paste("x", 1:(ncol(List_matrix) - K), sep = ''))
psiinv_summary = matrix(0, nrow = K*(K - 1)/2, ncol = 3*length(funcname))
rownames(psiinv_summary) = unlist(sapply(1:(K - 1), function(k) {
sapply((k + 1):K, function(s) {
return(paste(k, ", ", s, sep = ''))
})}))
colnames(psiinv_summary) = paste(rep(funcname, each = 3), c("PI", "BC", "TMLE"), sep = '.')
var_summary = psiinv_summary
ifvals = matrix(0, nrow = N*K*(K-1)/2, ncol = length(funcname))
colnames(ifvals) = funcname
rownames(ifvals) = rep(rownames(psiinv_summary), each = N)
nuis = matrix(0, nrow = N*K*(K-1)/2, ncol = 3*length(funcname))
colnames(nuis) = paste(rep(funcname, each = 3), c("q12", "q1", "q2"), sep = '.')
rownames(nuis) = rownames(ifvals)
nuistmle = nuis
permutset = sample(1:N, N, replace = FALSE)
for(i in 1:(K - 1)){
if(!setequal(List_matrix[,i], c(0,1))){
#     cat("List ", i, " is not in the required format or is degenerate.\n")
next
}
for(j in (i + 1):K){
if(!setequal(List_matrix[,j], c(0,1))){
#       cat("List ", j, " is not in the required format or is degenerate.\n")
next
}
psiinvmat = matrix(NA, nrow = nfolds, ncol = 3*length(funcname))
colnames(psiinvmat) = paste(rep(funcname, each = 3), c("PI", "BC", "TMLE"), sep = '.')
varmat = psiinvmat
ifvalsfold = matrix(0, nrow = N, ncol = length(funcname))
colnames(ifvalsfold) = funcname
nuisfold = matrix(0, nrow = N, ncol = 3*length(funcname))
colnames(nuisfold) = paste(rep(funcname, each = 3), c("q12", "q1", "q2"), sep = '.')
nuistmlefold = nuisfold
for(folds in 1:nfolds){#print(folds)
if(nfolds == 1){
List1 = List_matrix
List2 = List1
sbset = 1:N
}else{
sbset = ((folds - 1)*ceiling(N/nfolds) + 1):(folds*ceiling(N/nfolds))
sbset = sbset[sbset <= N]
List1 = List_matrix[permutset[-sbset],]
List2 = List_matrix[permutset[sbset],]
}
yi = List2[,paste("L", i, sep = '')]
yj = List2[,paste("L", j, sep = '')]
if(mean(List1[,i]*List1[,j]) > eps) {
for (func in funcname){
colsubset = stringr::str_subset(colnames(psiinv_summary), func)
qhat = try(get(paste0("qhat_", func))(List1, List2, K, i, j, eps, sl.lib = sl.lib), silent = TRUE)
if ("try-error" %in% class(qhat)) {
next
}
q12 = qhat$q12
q1 = pmin(pmax(q12, qhat$q1), 1)
q2 = pmax(q12/q1, pmin(qhat$q2, 1 + q12 - q1, 1))
nuisfold[sbset, paste(func, c("q12", "q1", "q2"), sep = '.')] = cbind(q12, q1, q2)
gammainvhat = q1*q2/q12
psiinvhat = mean(gammainvhat, na.rm = TRUE)
phihat = gammainvhat*(yj/q2 + yi/q1 - yi*yj/q12) - psiinvhat
ifvalsfold[sbset, func] = phihat
Qnphihat = mean(phihat, na.rm = TRUE)
psiinvhatq = max(psiinvhat + Qnphihat, 1)
psiinvmat[folds, colsubset][1:2] = c(psiinvhat, psiinvhatq)
sigmasq = var(phihat, na.rm = TRUE)
varmat[folds, colsubset][1:2] = sigmasq/N
datmat = as.data.frame(cbind(yi, yj, yi*yj, q1 - q12, q2 - q12, q12))
datmat[,4:6] = cbind(apply(datmat[,4:6], 2, function(u) {return(pmin(pmax(u, eps), 1 - eps))}))
colnames(datmat) = c("yi", "yj", "yij", "q10", "q02", "q12")
tmle = tmle(datmat = datmat, iter = iter, eps = eps, eps_stop = 0.00001, twolist = twolist, K = K)
if(tmle$error){
warning("TMLE did not run or converge.")
psiinvmat[folds,colsubset][3] = NA
varmat[folds,colsubset][3] = NA
}else{
datmat = tmle$datmat
q12 = pmax(datmat$q12, eps)
q1 = pmin(datmat$q12 + datmat$q10, 1)
q2 = pmax(pmin(datmat$q12 + datmat$q02, 1 + q12 - q1, 1), q12/q1)
nuistmlefold[sbset, paste(func, c("q12", "q1", "q2"), sep = '.')] = cbind(q12, q1, q2)
gammainvhat = q1*q2/q12
psiinvhat = mean(gammainvhat, na.rm = TRUE)
phihat = gammainvhat*(yi/q1 + yj/q2 - yi*yj/q12) - psiinvhat
Qnphihat = mean(phihat, na.rm = TRUE)
psiinvmat[folds,colsubset][3] = psiinvhat
sigmasq = var(phihat, na.rm = TRUE)
varmat[folds,colsubset][3] = sigmasq/N
}
}
}else{
message(cat("Overlap between the lists", i, "and", j, "is less than", eps))
psiinvmat[folds,] = NA
varmat[folds,] = NA
}
}
psiinv_summary[paste(i, ", ", j, sep = ''),] = colMeans(psiinvmat, na.rm = TRUE)
var_summary[paste(i, ", ", j, sep = ''),] = colMeans(varmat, na.rm = TRUE)
ifvals[rownames(ifvals) == paste(i, ", ", j, sep = ''),] = ifvalsfold
nuis[rownames(nuis) == paste(i, ", ", j, sep = ''),] = nuisfold
nuistmle[rownames(nuistmle) == paste(i, ", ", j, sep = ''),] = nuistmlefold
}
}
return(list(psi = 1/psiinv_summary, sigma2 = N*var_summary, n = N*psiinv_summary,
varn = N^2*var_summary + N*psiinv_summary*(psiinv_summary - 1), N = N,
ifvals = ifvals, nuis = nuis, nuistmle = nuistmle,
cin.l = N*psiinv_summary - 1.96*sqrt(N^2*var_summary + N*psiinv_summary*(psiinv_summary - 1)),
cin.u = N*psiinv_summary + 1.96 *sqrt(N^2*var_summary + N*psiinv_summary*(psiinv_summary - 1))
))
}
}
psi = numeric(0)
sigma2 = numeric(0)
n = numeric(0)
varn = numeric(0)
N = numeric(0)
List_matrix = data
l = ncol(List_matrix) - K
n = nrow(List_matrix)
#removing all rows with only 0's
List_matrix = List_matrix[which(rowSums(List_matrix[,1:K]) > 0),]
List_matrix = as.data.frame(List_matrix)
#N = number of observed or captured units
N = nrow(List_matrix)
conforminglists = apply(List_matrix[,1:K], 2, function(col){return(setequal(col, c(0,1)))})
if(sum(conforminglists) < 2){
stop("Data is not in the required format or lists are degenerate.")
return(NULL)
}
if(sum(conforminglists) < K){
Message(cat("Lists ", which(conforminglists == FALSE), " are not in the required format."))
}
if(!missing(condvar)){
if(is.character(condvar)){
condvar = which(colnames(List_matrix) == condvar) - K
}
}
condvar_vec = unique(List_matrix[,condvar + K])
psi = numeric(0)
sigma2 = numeric(0)
n = numeric(0)
varn = numeric(0)
N = numeric(0)
condvar
funcname = c("logit", "sl")
for(cvar in condvar_vec){
List_matrixsub = List_matrix[List_matrix[,K+condvar] == cvar,]
est = psinhat(List_matrix = List_matrixsub, K = K, funcname = funcname, nfolds = 2, twolist = twolist, eps = eps, iter = iter, sl.lib = sl.lib)
psi = rbind(psi, data.frame(est$psi, cvar))
sigma2 = rbind(sigma2, data.frame(est$sigma2, cvar))
n = rbind(n, data.frame(est$n, cvar))
varn = rbind(varn, data.frame(est$varn, cvar))
N = rbind(N, data.frame(est$N, cvar))
}
tmle = function(datmat, iter = 100, eps = 0.005, eps_stop = 0.00001, twolist = FALSE, K = 2){
if(!prod(c("yi", "yj", "yij", "q10", "q02", "q12") %in% colnames(datmat))){
stop("datmat misses one or more of the following columns: \t (yi, yj, yij, q10, q02, q12).")
return(list(error = TRUE))
}
expit = function(x) {
exp(x)/(1 + exp(x))
}
logit = function(x) {
log(x/(1 - x))
}
epsilon_error = 1
cnt = 0
while (abs(epsilon_error) > eps_stop){
cnt = cnt + 1
if (cnt > iter){break}
########################### model 1 for q12
dat1 = cbind(datmat$yij, logit(datmat$q12), (datmat$q10 + datmat$q12)/datmat$q12
+ (datmat$q02 + datmat$q12)/datmat$q12
- (datmat$q10 + datmat$q12)*(datmat$q02 + datmat$q12)/datmat$q12^2 )
colnames(dat1) = c("yij", "logitq12", "ratio")
dat1 = as.data.frame(dat1)
mod1 = try(glm(yij ~ -1 + offset(logitq12) + ratio
, family = binomial(link = logit), data = dat1, na.action = na.omit), silent = TRUE)
if (!("try-error" %in% class(mod1))){
datmat[,"q12"] = predict(mod1, newdata = dat1, type = "response")
}
datmat$q12 = pmax(pmin(datmat$q12, 1), eps)
########################### model 2 for q1
dat2 = cbind(datmat$yi*(1 - datmat$yj), logit(datmat$q10), (datmat$q02 + datmat$q12)/datmat$q12)
colnames(dat2) = c("yi0", "logitq10", "ratio")
dat2 = as.data.frame(dat2)
mod2 = try(glm(yi0 ~ -1 + offset(logitq10) + ratio, family = binomial(link = logit), data = dat2, na.action = na.omit), silent = TRUE)
if (!("try-error" %in% class(mod2))){
datmat$q10 = predict(mod2, newdata = dat2, type = "response")
datmat[,"q10"] = pmin(datmat[,"q10"], 1 - datmat$q12)
}
datmat$q10 = pmax(pmin(datmat$q10, 1), eps)
########################### model 3 for q2
if (K > 2 | twolist == FALSE){
dat3 = cbind(datmat$yj*(1 - datmat$yi), logit(datmat$q02), (datmat$q10 + datmat$q12)/datmat$q12)
colnames(dat3) = c("y0j", "logitq02", "ratio")
dat3 = as.data.frame(dat3)
mod3 = try(glm(y0j ~ -1 + offset(logitq02) + ratio, family = binomial(link = logit), data = dat3, na.action = na.omit), silent = TRUE)
if (!("try-error" %in% class(mod3))){
datmat$q02 = predict(mod3, newdata = dat3, type = "response")
datmat[,"q02"] = pmin(datmat[,"q02"], 1 - datmat$q10 - datmat$q12)
}
}else{
mod3 = mod2
datmat[,"q02"] = pmax(0, 1 - datmat$q10 - datmat$q12)
}
datmat$q02 = pmax(pmin(datmat$q02, 1), eps)
epsilon_error = max(abs(c(mod2$coefficients, mod3$coefficients, mod1$coefficients)))
}
return(list(error = epsilon_error > 1, datmat = datmat))
}
for(cvar in condvar_vec){
List_matrixsub = List_matrix[List_matrix[,K+condvar] == cvar,]
est = psinhat(List_matrix = List_matrixsub, K = K, funcname = funcname, nfolds = 2, twolist = twolist, eps = eps, iter = iter, sl.lib = sl.lib)
psi = rbind(psi, data.frame(est$psi, cvar))
sigma2 = rbind(sigma2, data.frame(est$sigma2, cvar))
n = rbind(n, data.frame(est$n, cvar))
varn = rbind(varn, data.frame(est$varn, cvar))
N = rbind(N, data.frame(est$N, cvar))
}
n
psu
psi
N
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?gam::gam
devtools::document()

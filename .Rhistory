cin.u = numeric(0)
for(cvar in condvar_vec){
List_matrixsub = List_matrix[List_matrix[,K + condvar] == cvar, -c(K + condvar)]
est = try(psinhat(List_matrix = List_matrixsub, K = K, filterrows = filterrows, funcname = funcname, nfolds = 2, twolist = twolist, eps = eps, iter = iter, sl.lib = sl.lib), silent = TRUE)
if("try-error" %in% class(est)){
next
}
print(data.frame(listpair = rownames(est$psi), est$psi, condvar = cvar))
psi = rbind(psi, data.frame(listpair = rownames(est$psi), est$psi, condvar = cvar), make.row.names = FALSE)
sigma2 = rbind(sigma2, data.frame(listpair = rownames(est$psi), est$sigma2, condvar = cvar), make.row.names = FALSE)
n = rbind(n, data.frame(listpair = rownames(est$psi), est$n, condvar = cvar), make.row.names = FALSE)
varn = rbind(varn, data.frame(listpair = rownames(est$psi), est$varn, condvar = cvar), make.row.names = FALSE)
N = rbind(N, data.frame(N = est$N, condvar = cvar))
cin.l = rbind(cin.l, data.frame(listpair = rownames(est$psi), est$cin.l, condvar = cvar), make.row.names = FALSE)
cin.u = rbind(cin.u, data.frame(listpair = rownames(est$psi), est$cin.u, condvar = cvar), make.row.names = FALSE)
}
est$psi
psi = numeric(0)
sigma2 = numeric(0)
n = numeric(0)
varn = numeric(0)
N = numeric(0)
cin.l = numeric(0)
cin.u = numeric(0)
for(cvar in condvar_vec){
List_matrixsub = List_matrix[List_matrix[,K + condvar] == cvar, -c(K + condvar)]
est = try(psinhat(List_matrix = List_matrixsub, K = K, filterrows = filterrows, funcname = funcname, nfolds = 2, twolist = twolist, eps = eps, iter = iter, sl.lib = sl.lib), silent = TRUE)
if("try-error" %in% class(est)){
next
}
#print(data.frame(listpair = rownames(est$psi), est$psi, condvar = cvar))
N = rbind(N, data.frame(N = est$N, condvar = cvar))
if(colnames(est$psi) == "PI"){
psi = rbind(psi, data.frame(listpair = rownames(est$psi), rep(est$psi, 3*length(funcname)), condvar = cvar), make.row.names = FALSE)
sigma2 = rbind(sigma2, data.frame(listpair = rownames(est$psi), rep(est$sigma2, 3*length(funcname)), condvar = cvar), make.row.names = FALSE)
n = rbind(n, data.frame(listpair = rownames(est$psi), rep(est$n, 3*length(funcname)), condvar = cvar), make.row.names = FALSE)
varn = rbind(varn, data.frame(listpair = rownames(est$psi), rep(est$varn, 3*length(funcname)), condvar = cvar), make.row.names = FALSE)
cin.l = rbind(cin.l, data.frame(listpair = rownames(est$psi), rep(est$cin.l, 3*length(funcname)), condvar = cvar), make.row.names = FALSE)
cin.u = rbind(cin.u, data.frame(listpair = rownames(est$psi), rep(est$cin.u, 3*length(funcname)), condvar = cvar), make.row.names = FALSE)
}
psi = rbind(psi, data.frame(listpair = rownames(est$psi), est$psi, condvar = cvar), make.row.names = FALSE)
sigma2 = rbind(sigma2, data.frame(listpair = rownames(est$psi), est$sigma2, condvar = cvar), make.row.names = FALSE)
n = rbind(n, data.frame(listpair = rownames(est$psi), est$n, condvar = cvar), make.row.names = FALSE)
varn = rbind(varn, data.frame(listpair = rownames(est$psi), est$varn, condvar = cvar), make.row.names = FALSE)
cin.l = rbind(cin.l, data.frame(listpair = rownames(est$psi), est$cin.l, condvar = cvar), make.row.names = FALSE)
cin.u = rbind(cin.u, data.frame(listpair = rownames(est$psi), est$cin.u, condvar = cvar), make.row.names = FALSE)
}
#' @references van der Laan, M. J., Polley, E. C. and Hubbard, A. E. (2008) Super Learner, Statistical Applications of Genetics and Molecular Biology, 6, article 25.
#' @examples
#' data = matrix(sample(c(0,1), 2000, replace = TRUE), ncol = 2)
#' x = matrix(rnorm(nrow(data)*3, 2,1), nrow = nrow(data))
#' ss = sample(1:6, nrow(data), replace = TRUE)
#'
#' data = cbind(data, x, ss)
#' psin_estimate = psinhatcond(List_matrix = data, funcname = c("logit", "sl"), condvar = 'ss', nfolds = 2, twolist = FALSE, eps = 0.005)
#' #this returns the plug-in, the bias-corrected and the tmle estimate for the two models conditioned on column ss
#' @export
psinhatcond <- function(List_matrix, K = 2, filterrows = TRUE, funcname = c("logit"), condvar, nfolds = 5, twolist = FALSE, eps = 0.005, iter = 50, sl.lib = c("SL.gam", "SL.glm", "SL.glm.interaction", "SL.ranger", "SL.glmnet")){
l = ncol(List_matrix) - K
n = nrow(List_matrix)
stopifnot(!is.null(dim(List_matrix)))
stopifnot(!missing(condvar))
stopifnot(is.element(condvar, colnames(List_matrix)))
List_matrix = as.data.frame(List_matrix)
#N = number of observed or captured units
N = nrow(List_matrix)
conforminglists = apply(List_matrix[,1:K], 2, function(col){return(setequal(col, c(0,1)))})
if(sum(conforminglists) < 2){
stop("Data is not in the required format or lists are degenerate.")
return(NULL)
}
if(sum(conforminglists) < K){
Message(cat("Lists ", which(conforminglists == FALSE), " are not in the required format."))
}
if(!missing(condvar)){
if(is.character(condvar)){
condvar = which(colnames(List_matrix) == condvar) - K
}
}
condvar_vec = unique(List_matrix[,condvar + K])
psi = numeric(0)
sigma2 = numeric(0)
n = numeric(0)
varn = numeric(0)
N = numeric(0)
cin.l = numeric(0)
cin.u = numeric(0)
for(cvar in condvar_vec){
List_matrixsub = List_matrix[List_matrix[,K + condvar] == cvar, -c(K + condvar)]
est = try(psinhat(List_matrix = List_matrixsub, K = K, filterrows = filterrows, funcname = funcname, nfolds = 2, twolist = twolist, eps = eps, iter = iter, sl.lib = sl.lib), silent = TRUE)
if("try-error" %in% class(est)){
next
}
#print(data.frame(listpair = rownames(est$psi), est$psi, condvar = cvar))
N = rbind(N, data.frame(N = est$N, condvar = cvar))
if("PI" %in% colnames(est$psi)){
psi = rbind(psi, data.frame(listpair = rownames(est$psi), rep(est$psi, 3*length(funcname)), condvar = cvar), make.row.names = FALSE)
sigma2 = rbind(sigma2, data.frame(listpair = rownames(est$psi), rep(est$sigma2, 3*length(funcname)), condvar = cvar), make.row.names = FALSE)
n = rbind(n, data.frame(listpair = rownames(est$psi), rep(est$n, 3*length(funcname)), condvar = cvar), make.row.names = FALSE)
varn = rbind(varn, data.frame(listpair = rownames(est$psi), rep(est$varn, 3*length(funcname)), condvar = cvar), make.row.names = FALSE)
cin.l = rbind(cin.l, data.frame(listpair = rownames(est$psi), rep(est$cin.l, 3*length(funcname)), condvar = cvar), make.row.names = FALSE)
cin.u = rbind(cin.u, data.frame(listpair = rownames(est$psi), rep(est$cin.u, 3*length(funcname)), condvar = cvar), make.row.names = FALSE)
}
psi = rbind(psi, data.frame(listpair = rownames(est$psi), est$psi, condvar = cvar), make.row.names = FALSE)
sigma2 = rbind(sigma2, data.frame(listpair = rownames(est$psi), est$sigma2, condvar = cvar), make.row.names = FALSE)
n = rbind(n, data.frame(listpair = rownames(est$psi), est$n, condvar = cvar), make.row.names = FALSE)
varn = rbind(varn, data.frame(listpair = rownames(est$psi), est$varn, condvar = cvar), make.row.names = FALSE)
cin.l = rbind(cin.l, data.frame(listpair = rownames(est$psi), est$cin.l, condvar = cvar), make.row.names = FALSE)
cin.u = rbind(cin.u, data.frame(listpair = rownames(est$psi), est$cin.u, condvar = cvar), make.row.names = FALSE)
}
return(list(psi = psi, sigma2 = sigma2, n = n, varn = varn, N = N, cin.l = cin.l, cin.u = cin.u))
}
psi = numeric(0)
sigma2 = numeric(0)
n = numeric(0)
varn = numeric(0)
N = numeric(0)
cin.l = numeric(0)
cin.u = numeric(0)
for(cvar in condvar_vec){
List_matrixsub = List_matrix[List_matrix[,K + condvar] == cvar, -c(K + condvar)]
est = try(psinhat(List_matrix = List_matrixsub, K = K, filterrows = filterrows, funcname = funcname, nfolds = 2, twolist = twolist, eps = eps, iter = iter, sl.lib = sl.lib), silent = TRUE)
if("try-error" %in% class(est)){
next
}
#print(data.frame(listpair = rownames(est$psi), est$psi, condvar = cvar))
N = rbind(N, data.frame(N = est$N, condvar = cvar))
if("PI" %in% colnames(est$psi)){
psi = rbind(psi, data.frame(listpair = rownames(est$psi), rep(est$psi, 3*length(funcname)), condvar = cvar), make.row.names = FALSE)
sigma2 = rbind(sigma2, data.frame(listpair = rownames(est$psi), rep(est$sigma2, 3*length(funcname)), condvar = cvar), make.row.names = FALSE)
n = rbind(n, data.frame(listpair = rownames(est$psi), rep(est$n, 3*length(funcname)), condvar = cvar), make.row.names = FALSE)
varn = rbind(varn, data.frame(listpair = rownames(est$psi), rep(est$varn, 3*length(funcname)), condvar = cvar), make.row.names = FALSE)
cin.l = rbind(cin.l, data.frame(listpair = rownames(est$psi), rep(est$cin.l, 3*length(funcname)), condvar = cvar), make.row.names = FALSE)
cin.u = rbind(cin.u, data.frame(listpair = rownames(est$psi), rep(est$cin.u, 3*length(funcname)), condvar = cvar), make.row.names = FALSE)
}
psi = rbind(psi, data.frame(listpair = rownames(est$psi), est$psi, condvar = cvar), make.row.names = FALSE)
sigma2 = rbind(sigma2, data.frame(listpair = rownames(est$psi), est$sigma2, condvar = cvar), make.row.names = FALSE)
n = rbind(n, data.frame(listpair = rownames(est$psi), est$n, condvar = cvar), make.row.names = FALSE)
varn = rbind(varn, data.frame(listpair = rownames(est$psi), est$varn, condvar = cvar), make.row.names = FALSE)
cin.l = rbind(cin.l, data.frame(listpair = rownames(est$psi), est$cin.l, condvar = cvar), make.row.names = FALSE)
cin.u = rbind(cin.u, data.frame(listpair = rownames(est$psi), est$cin.u, condvar = cvar), make.row.names = FALSE)
}
funcname
psi
cvar
List_matrixsub = List_matrix[List_matrix[,K + condvar] == cvar, -c(K + condvar)]
est = try(psinhat(List_matrix = List_matrixsub, K = K, filterrows = filterrows, funcname = funcname, nfolds = 2, twolist = twolist, eps = eps, iter = iter, sl.lib = sl.lib), silent = TRUE)
est
data.frame(listpair = rownames(est$psi), rep(est$psi, 3*length(funcname)), condvar = cvar)
data.frame(listpair = rownames(est$psi), t(rep(est$psi, 3*length(funcname))), condvar = cvar)
psi = numeric(0)
sigma2 = numeric(0)
n = numeric(0)
varn = numeric(0)
N = numeric(0)
cin.l = numeric(0)
cin.u = numeric(0)
for(cvar in condvar_vec){
List_matrixsub = List_matrix[List_matrix[,K + condvar] == cvar, -c(K + condvar)]
est = try(psinhat(List_matrix = List_matrixsub, K = K, filterrows = filterrows, funcname = funcname, nfolds = 2, twolist = twolist, eps = eps, iter = iter, sl.lib = sl.lib), silent = TRUE)
if("try-error" %in% class(est)){
next
}
#print(data.frame(listpair = rownames(est$psi), est$psi, condvar = cvar))
N = rbind(N, data.frame(N = est$N, condvar = cvar))
if("PI" %in% colnames(est$psi)){
psi = rbind(psi, data.frame(listpair = rownames(est$psi), t(rep(est$psi, 3*length(funcname))), condvar = cvar), make.row.names = FALSE)
sigma2 = rbind(sigma2, data.frame(listpair = rownames(est$psi), t(rep(est$sigma2, 3*length(funcname))), condvar = cvar), make.row.names = FALSE)
n = rbind(n, data.frame(listpair = rownames(est$psi), t(rep(est$n, 3*length(funcname))), condvar = cvar), make.row.names = FALSE)
varn = rbind(varn, data.frame(listpair = rownames(est$psi), t(rep(est$varn, 3*length(funcname))), condvar = cvar), make.row.names = FALSE)
cin.l = rbind(cin.l, data.frame(listpair = rownames(est$psi), t(rep(est$cin.l, 3*length(funcname))), condvar = cvar), make.row.names = FALSE)
cin.u = rbind(cin.u, data.frame(listpair = rownames(est$psi), t(rep(est$cin.u, 3*length(funcname))), condvar = cvar), make.row.names = FALSE)
}
psi = rbind(psi, data.frame(listpair = rownames(est$psi), est$psi, condvar = cvar), make.row.names = FALSE)
sigma2 = rbind(sigma2, data.frame(listpair = rownames(est$psi), est$sigma2, condvar = cvar), make.row.names = FALSE)
n = rbind(n, data.frame(listpair = rownames(est$psi), est$n, condvar = cvar), make.row.names = FALSE)
varn = rbind(varn, data.frame(listpair = rownames(est$psi), est$varn, condvar = cvar), make.row.names = FALSE)
cin.l = rbind(cin.l, data.frame(listpair = rownames(est$psi), est$cin.l, condvar = cvar), make.row.names = FALSE)
cin.u = rbind(cin.u, data.frame(listpair = rownames(est$psi), est$cin.u, condvar = cvar), make.row.names = FALSE)
}
#' @references van der Laan, M. J., Polley, E. C. and Hubbard, A. E. (2008) Super Learner, Statistical Applications of Genetics and Molecular Biology, 6, article 25.
#' @examples
#' data = matrix(sample(c(0,1), 2000, replace = TRUE), ncol = 2)
#' x = matrix(rnorm(nrow(data)*3, 2,1), nrow = nrow(data))
#' ss = sample(1:6, nrow(data), replace = TRUE)
#'
#' data = cbind(data, x, ss)
#' psin_estimate = psinhatcond(List_matrix = data, funcname = c("logit", "sl"), condvar = 'ss', nfolds = 2, twolist = FALSE, eps = 0.005)
#' #this returns the plug-in, the bias-corrected and the tmle estimate for the two models conditioned on column ss
#' @export
psinhatcond <- function(List_matrix, K = 2, filterrows = TRUE, funcname = c("logit"), condvar, nfolds = 5, twolist = FALSE, eps = 0.005, iter = 50, sl.lib = c("SL.gam", "SL.glm", "SL.glm.interaction", "SL.ranger", "SL.glmnet")){
l = ncol(List_matrix) - K
n = nrow(List_matrix)
stopifnot(!is.null(dim(List_matrix)))
stopifnot(!missing(condvar))
stopifnot(is.element(condvar, colnames(List_matrix)))
List_matrix = as.data.frame(List_matrix)
#N = number of observed or captured units
N = nrow(List_matrix)
conforminglists = apply(List_matrix[,1:K], 2, function(col){return(setequal(col, c(0,1)))})
if(sum(conforminglists) < 2){
stop("Data is not in the required format or lists are degenerate.")
return(NULL)
}
if(sum(conforminglists) < K){
Message(cat("Lists ", which(conforminglists == FALSE), " are not in the required format."))
}
if(!missing(condvar)){
if(is.character(condvar)){
condvar = which(colnames(List_matrix) == condvar) - K
}
}
condvar_vec = unique(List_matrix[,condvar + K])
psi = numeric(0)
sigma2 = numeric(0)
n = numeric(0)
varn = numeric(0)
N = numeric(0)
cin.l = numeric(0)
cin.u = numeric(0)
for(cvar in condvar_vec){
List_matrixsub = List_matrix[List_matrix[,K + condvar] == cvar, -c(K + condvar)]
est = try(psinhat(List_matrix = List_matrixsub, K = K, filterrows = filterrows, funcname = funcname, nfolds = 2, twolist = twolist, eps = eps, iter = iter, sl.lib = sl.lib), silent = TRUE)
if("try-error" %in% class(est)){
next
}
if("PI" %in% colnames(est$psi)){
next
}
#print(data.frame(listpair = rownames(est$psi), est$psi, condvar = cvar))
N = rbind(N, data.frame(N = est$N, condvar = cvar))
if("PI" %in% colnames(est$psi) & FALSE){
psi = rbind(psi, data.frame(listpair = rownames(est$psi), t(rep(est$psi, 3*length(funcname))), condvar = cvar), make.row.names = FALSE)
sigma2 = rbind(sigma2, data.frame(listpair = rownames(est$psi), t(rep(est$sigma2, 3*length(funcname))), condvar = cvar), make.row.names = FALSE)
n = rbind(n, data.frame(listpair = rownames(est$psi), t(rep(est$n, 3*length(funcname))), condvar = cvar), make.row.names = FALSE)
varn = rbind(varn, data.frame(listpair = rownames(est$psi), t(rep(est$varn, 3*length(funcname))), condvar = cvar), make.row.names = FALSE)
cin.l = rbind(cin.l, data.frame(listpair = rownames(est$psi), t(rep(est$cin.l, 3*length(funcname))), condvar = cvar), make.row.names = FALSE)
cin.u = rbind(cin.u, data.frame(listpair = rownames(est$psi), t(rep(est$cin.u, 3*length(funcname))), condvar = cvar), make.row.names = FALSE)
}
psi = rbind(psi, data.frame(listpair = rownames(est$psi), est$psi, condvar = cvar), make.row.names = FALSE)
sigma2 = rbind(sigma2, data.frame(listpair = rownames(est$psi), est$sigma2, condvar = cvar), make.row.names = FALSE)
n = rbind(n, data.frame(listpair = rownames(est$psi), est$n, condvar = cvar), make.row.names = FALSE)
varn = rbind(varn, data.frame(listpair = rownames(est$psi), est$varn, condvar = cvar), make.row.names = FALSE)
cin.l = rbind(cin.l, data.frame(listpair = rownames(est$psi), est$cin.l, condvar = cvar), make.row.names = FALSE)
cin.u = rbind(cin.u, data.frame(listpair = rownames(est$psi), est$cin.u, condvar = cvar), make.row.names = FALSE)
}
return(list(psi = psi, sigma2 = sigma2, n = n, varn = varn, N = N, cin.l = cin.l, cin.u = cin.u))
}
datacrc1 = data.frame(datacrc, ss)
p = psinhatcond(List_matrix = datacrc1, condvar = 'ss')
plot(psinhatcond = p)$g2
library(drpop)
n = 5000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*xi), expit(-0.6 + 0.3*xi)))}))
datacrc = cbind(y1, y2, exp(x/2))
ss = sample(c('a','b','c','d','e','f'), nrow(datacrc), replace = TRUE, prob = (1:6)/sum(1:6))
datacrc1 = data.frame(datacrc, ss)
p = psinhatcond(List_matrix = datacrc1, condvar = 'ss')
plot(psinhatcond = p)
library(drpop)
n = 5000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*xi), expit(-0.6 + 0.3*xi)))}))
datacrc = cbind(y1, y2, exp(x/2))
ss = sample(c('a','b','c','d','e','f'), nrow(datacrc), replace = TRUE, prob = (1:6)/sum(1:6))
datacrc1 = data.frame(datacrc, ss)
p = psinhatcond(List_matrix = datacrc1, condvar = 'ss')
plot(psinhatcond = p)$g2
library(drpop)
n = 10000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*xi), expit(-0.6 + 0.3*xi)))}))
datacrc = cbind(y1, y2, exp(x/2))
ss = sample(c('a','b','c','d','e','f'), nrow(datacrc), replace = TRUE, prob = (1:6)/sum(1:6))
datacrc1 = data.frame(datacrc, ss)
p = psinhatcond(List_matrix = datacrc1, condvar = 'ss')
plot(psinhatcond = p)$g2
library(drpop)
n = 10000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*xi), expit(-0.6 + 0.3*xi)))}))
datacrc = cbind(y1, y2, exp(x/2))
ss = sample(c('a','b','c','d','e','f'), nrow(datacrc), replace = TRUE, prob = (1:6)/sum(1:6))
datacrc1 = data.frame(datacrc, ss)
p = psinhatcond(List_matrix = datacrc1, condvar = 'ss')
summary = plot(psinhatcond = p)
summary$g2
devtoold::install_github("mqnjqrid/drpop")
devtools::install_github("mqnjqrid/drpop")
library(drpop)
n = 10000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*xi), expit(-0.6 + 0.3*xi)))}))
datacrc = cbind(y1, y2, exp(x/2))
ss = sample(c('a','b','c','d','e','f'), nrow(datacrc), replace = TRUE, prob = (1:6)/sum(1:6))
datacrc1 = data.frame(datacrc, ss)
p = psinhatcond(List_matrix = datacrc1, condvar = 'ss')
summary = plot(psinhatcond = p)
summary$g2
devtools::install_github("mqnjqrid/drpop")
library(drpop)
n = 10000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*xi), expit(-0.6 + 0.3*xi)))}))
datacrc = cbind(y1, y2, exp(x/2))
ss = sample(c('a','b','c','d','e','f'), nrow(datacrc), replace = TRUE, prob = (1:6)/sum(1:6))
datacrc1 = data.frame(datacrc, ss)
p = psinhatcond(List_matrix = datacrc1, condvar = 'ss')
summary = plot(psinhatcond = p)
summary$g2
remove.packages("drpop", lib="~/R/win-library/4.0")
devtools::install_github("mqnjqrid/drpop")
?require
library(drpop)
n = 10000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
ss = sample(c('m','f'), nrow(datacrc), replace = TRUE, prob = c(0.33, 0.66))
library(drpop)
n = 10000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
ss = sample(c('m','f'), n, replace = TRUE, prob = c(0.33, 0.66))
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = sapply(1:n, function(i) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,]), expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,])))}))
library(drpop)
n = 10000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
ss = sample(c('m','f'), n, replace = TRUE, prob = c(0.33, 0.66))
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = sapply(1:n, function(i) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,]), expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,])))})
datacrc = cbind(y1, y2, exp(x/2), ss)
p = psinhatcond(List_matrix = datacrc, condvar = 'ss')
summary = plot(psinhatcond = p)
library(drpop)
n = 10000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
ss = sample(c('m','f'), n, replace = TRUE, prob = c(0.33, 0.66))
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = sapply(1:n, function(i) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,]), expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,])))})
datacrc = cbind(y1, y2, exp(x/2), ss)
p = psinhatcond(List_matrix = datacrc, condvar = 'ss')
p
brow(datacrc)
nrow(datacrc)
ss
p
head(datacrc)
library(drpop)
n = 10000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
ss = sample(c('m','f'), n, replace = TRUE, prob = c(0.33, 0.66))
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = sapply(1:n, function(i) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,]), expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,])))})
datacrc = cbind.data.frame(y1, y2, exp(x/2), ss)
p = psinhatcond(List_matrix = datacrc, condvar = 'ss')
summary = plot(psinhatcond = p)
summary$g2
library(drpop)
n = 10000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
ss = sample(c('m','f'), n, replace = TRUE, prob = c(0.33, 0.66))
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = sapply(1:n, function(i) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,]), expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,])))})
datacrc = cbind.data.frame(y1, y2, exp(x/2), ss)
p = psinhatcond(List_matrix = datacrc, condvar = 'ss')
summary = plot(psinhatcond = p)
summary$g2
library(drpop)
n = 10000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
ss = sample(c('m','f'), n, replace = TRUE, prob = c(0.33, 0.66))
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = sapply(1:n, function(i) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,]), expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,])))})
datacrc = cbind.data.frame(y1, y2, exp(x/2), ss)
p = psinhatcond(List_matrix = datacrc, condvar = 'ss')
summary = plot(psinhatcond = p)
summary$g2 + geom_line(yintercept = 6000)
summary$g2 + geom_line(y = 6000)
summary$g2 + geom_line(y = 6600)
summary$g2 + geom_hline(yintercept =  = 6600)
summary$g2 + geom_hline(yintercept = 6600)
summary$g2 + geom_hline(yintercept = table(ss))
library(drpop)
n = 10000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
ss = sample(c('m','f'), n, replace = TRUE, prob = c(0.45, 0.55))
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = sapply(1:n, function(i) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,]), expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,])))})
datacrc = cbind.data.frame(y1, y2, exp(x/2), ss)
p = psinhatcond(List_matrix = datacrc, condvar = 'ss')
summary = plot(psinhatcond = p)
summary$g2 + geom_hline(yintercept = table(ss))
library(drpop)
n = 10000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
ss = sample(c('m','f'), n, replace = TRUE, prob = c(0.45, 0.55))
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = sapply(1:n, function(i) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,]), expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,])))})
datacrc = cbind.data.frame(y1, y2, exp(x/2), ss)
p = psinhatcond(List_matrix = datacrc, condvar = 'ss')
summary = plot(psinhatcond = p)
summary$g2 + geom_hline(yintercept = table(ss))
library(drpop)
n = 10000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
ss = sample(c('m','f'), n, replace = TRUE, prob = c(0.45, 0.55))
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = sapply(1:n, function(i) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,]), expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,])))})
datacrc = cbind.data.frame(y1, y2, exp(x/2), ss)
p = psinhatcond(List_matrix = datacrc, condvar = 'ss')
summary = plot(psinhatcond = p)
summary$g2 + geom_hline(yintercept = table(ss), color = "lightbrown")
library(drpop)
n = 10000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
ss = sample(c('m','f'), n, replace = TRUE, prob = c(0.45, 0.55))
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = sapply(1:n, function(i) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,]), expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,])))})
datacrc = cbind.data.frame(y1, y2, exp(x/2), ss)
p = psinhatcond(List_matrix = datacrc, condvar = 'ss')
summary = plot(psinhatcond = p)
summary$g2 + geom_hline(yintercept = table(ss), color = "#6c6966")
library(drpop)
n = 10000
x = matrix(rnorm(n*3, 2, 1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
ss = sample(c('m','f'), n, replace = TRUE, prob = c(0.45, 0.55))
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = sapply(1:n, function(i) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,]), expit(-0.6 + 0.3*(ss[i] == 'm') + 0.3*x[i,])))})
datacrc = cbind.data.frame(y1, y2, exp(x/2), ss)
p = psinhatcond(List_matrix = datacrc, condvar = 'ss')
summary = plot(psinhatcond = p)
summary$g2 + geom_hline(yintercept = table(ss), color = "brown", linetype = "dashed")
library(drpop)
n = 3000
x = matrix(rnorm(n*3, 2,1), nrow = n)
expit = function(xi) {
exp(sum(xi))/(1 + exp(sum(xi)))
}
y1 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.4*xi), expit(-0.6 + 0.4*xi)))}))
y2 = unlist(apply(x, 1, function(xi) {sample(c(0, 1), 1, replace = TRUE, prob = c( 1 - expit(-0.6 + 0.3*xi), expit(-0.6 + 0.3*xi)))}))
datacrc = cbind(y1, y2, exp(x/2))
estim <- psinhat(List_matrix = datacrc, func = c("logit", "sl"), nfolds = 2, eps = 0.01)
plot(psinhat = estim)$g1
#result = melt(as.data.frame(estim), variable.name = "estimator", value.name = "population_size")
#ggplot(result, aes(x = population_size - n, fill = estimator, color = estimator)) +
#  geom_density(alpha = 0.4) +
#  xlab("Bias on n")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()

class(qhat)
q12 = qhat$q12
q1 = pmin(pmax(q12, qhat$q1), 1)
q2 = pmax(q12/q1, pmin(qhat$q2, 1 + q12 - q1, 1))
plot(q120[permuteset[sbset]], q12)
plot(q120[permutset[sbset]], q12)
plot(q10[permutset[sbset]], q1)
plot(q20[permutset[sbset]], q2)
eps
eps = 0.005
qhat = try(get(paste0("qhat_", func))(List.train = List1, List.test = List2, K, i, j, eps = eps), silent = TRUE)
class(qhat)
q12 = qhat$q12
q1 = pmin(pmax(q12, qhat$q1), 1)
q2 = pmax(q12/q1, pmin(qhat$q2, 1 + q12 - q1, 1))
plot(q120[permutset[sbset]], q12)
plot(q10[permutset[sbset]], q1)
plot(q20[permutset[sbset]], q2)
func = "ranger"
qhat = try(get(paste0("qhat_", func))(List.train = List1, List.test = List2, K, i, j, eps = eps), silent = TRUE)
class(qhat)
q12 = qhat$q12
q1 = pmin(pmax(q12, qhat$q1), 1)
q2 = pmax(q12/q1, pmin(qhat$q2, 1 + q12 - q1, 1))
plot(q120[permutset[sbset]], q12)
plot(q10[permutset[sbset]], q1)
plot(q20[permutset[sbset]], q2)
func = "logit"
qhat = try(get(paste0("qhat_", func))(List.train = List1, List.test = List2, K, i, j, eps = eps), silent = TRUE)
class(qhat)
q12 = qhat$q12
q1 = pmin(pmax(q12, qhat$q1), 1)
q2 = pmax(q12/q1, pmin(qhat$q2, 1 + q12 - q1, 1))
plot(q120[permutset[sbset]], q12)
plot(q10[permutset[sbset]], q1)
plot(q20[permutset[sbset]], q2)
summary(List_matrix$y1*List_matrix$y2)
summary(List_matrix$L1*List_matrix$L2)
q12 = qhat$q12
q1 = pmin(pmax(q12, qhat$q1), 1)
q2 = pmin(qhat$q2, 1 + q12 - q1, 1)
plot(q120[permutset[sbset]], q12)
plot(q10[permutset[sbset]], q1)
plot(q20[permutset[sbset]], q2)
func = "rangerlogit"
qhat = try(get(paste0("qhat_", func))(List.train = List1, List.test = List2, K, i, j, eps = eps), silent = TRUE)
class(qhat)
q12 = qhat$q12
q1 = pmin(pmax(q12, qhat$q1), 1)
q2 = pmin(qhat$q2, 1 + q12 - q1, 1)
plot(q120[permutset[sbset]], q12)
plot(q10[permutset[sbset]], q1)
plot(q20[permutset[sbset]], q2)
devtools::load_all()
set.seed(1234)
funcname = c("rangerlogit", "logit", "ranger")
result = numeric(0)
n = 5000
for(s in 1:30){
print(s)
ld = simuldata2(n = n, l = 4, ep = -3)
listdata = ld$List_matrix
listdata2 = ld$List_matrix_xstar
p1 = psinhat(listdata, funcname = funcname, nfolds = 2, iter = 250, eps_stop = 0.001)
p2 = psinhat(listdata2, funcname = funcname, nfolds = 2, iter = 250, eps_stop = 0.001)
result = rbind(result, cbind(t(p1$n), t(p1$varn), "x"),
cbind(t(p1$n), t(p1$varn), "x*"))
}
result2 = cbind(rownames(result), result)
library(plyr)
library(tidyr)
library(dplyr)
library(ggplot2)
result2 = as.data.frame(result2)
colnames(result2) = c("Var1", "n", "varn", "covariate")
result2$n = as.numeric(as.character(result2$n))
result2$varn = as.numeric(as.character(result2$varn))
result2$biasn = result2$n - n
ggplot(result2, aes(x = biasn, fill = Var1)) + geom_density(alpha = 0.3)
ggplot(result2, aes(x = biasn, fill = Var1)) + geom_density(alpha = 0.3)  + xlim (c(-100, 500))
ggplot(result2, aes(x = biasn, fill = Var1)) + geom_density(alpha = 0.3)  + xlim (c(-100, 100))
ggplot(result2, aes(x = biasn, fill = Var1)) + geom_density(alpha = 0.3)  + xlim (c(-100, 1000))
ggplot(result2, aes(x = biasn, fill = Var1)) + geom_density(alpha = 0.3)  + xlim (c(-400, 1000))
ggplot(result2, aes(x = biasn, fill = Var1)) + geom_density(alpha = 0.3)  + xlim (c(-600, 1000))
ggplot(result2, aes(x = biasn, fill = Var1)) + geom_density(alpha = 0.3)  + xlim (c(-1000, 1))
ggplot(result2, aes(x = biasn, fill = Var1)) + geom_density(alpha = 0.3)  + xlim (c(1000, 5000))
ggplot(result2, aes(x = biasn, fill = Var1)) + geom_density(alpha = 0.3)  + xlim (c(500, 5000))
ggplot(result2, aes(x = biasn, fill = Var1)) + geom_density(alpha = 0.3)  + xlim (c(100, 5000))
ggplot(result2[result2$Var1 == "rangerlogit.DR",], aes(x = biasn, fill = Var1)) + geom_density(alpha = 0.3)
eps
eps = 0.005
ld = simuldata2(n = 3000, l = 3, ep = -2)
List_matrix = ld$List_matrix
p1 = apply(List_matrix[,-c(1:2)], 1, ld$pi1)
p2 = apply(List_matrix[,-c(1:2)], 1, ld$pi2)
gam = 1 - (1 - p1)*(1 - p2)
q10 = p1/gam
q20 = p2/gam
q120 = p1*p2/gam
K = 2
l = ncol(List_matrix) - K
n = nrow(List_matrix)
nfolds = 2
eps = 0
func = "rangerlogit"
List_matrix = na.omit(List_matrix)
List_matrix = as.data.frame(List_matrix)
#N = number of observed or captured units
N = nrow(List_matrix)
#renaming the columns of List_matrix for ease of use
colnames(List_matrix) = c(paste("L", 1:K, sep = ''), paste("x", 1:(ncol(List_matrix) - K), sep = ''))
psiinv_summary = matrix(0, nrow = K*(K - 1)/2, ncol = 3*length(funcname))
rownames(psiinv_summary) = unlist(sapply(1:(K - 1), function(k) {
sapply((k + 1):K, function(s) {
return(paste0(k, ",", s))
})}))
colnames(psiinv_summary) = paste(rep(funcname, each = 3), c("PI", "DR", "TMLE"), sep = '.')
var_summary = psiinv_summary
ifvals = matrix(NA, nrow = N*K*(K-1)/2, ncol = length(funcname))
colnames(ifvals) = funcname
rownames(ifvals) = rep(rownames(psiinv_summary), each = N)
nuis = matrix(NA, nrow = N*K*(K-1)/2, ncol = 3*length(funcname))
colnames(nuis) = paste(rep(funcname, each = 3), c("q12", "q1", "q2"), sep = '.')
rownames(nuis) = rownames(ifvals)
nuistmle = nuis
permutset = sample(1:N, N, replace = FALSE)
i = 1; j = 2
psiinvmat = matrix(numeric(0), nrow = nfolds, ncol = 3*length(funcname))
colnames(psiinvmat) = paste(rep(funcname, each = 3), c("PI", "DR", "TMLE"), sep = '.')
varmat = psiinvmat
ifvalsfold = matrix(numeric(0), nrow = N, ncol = length(funcname))
colnames(ifvalsfold) = funcname
nuisfold = matrix(numeric(0), nrow = N, ncol = 3*length(funcname))
colnames(nuisfold) = paste(rep(funcname, each = 3), c("q12", "q1", "q2"), sep = '.')
nuistmlefold = nuisfold
folds = 1
if(nfolds == 1){
List1 = List_matrix
List2 = List1
sbset = 1:N
}else{
sbset = ((folds - 1)*ceiling(N/nfolds) + 1):(folds*ceiling(N/nfolds))
sbset = sbset[sbset <= N]
List1 = List_matrix[permutset[-sbset],]
List2 = List_matrix[permutset[sbset],]
}
yi = List2[,paste("L", i, sep = '')]
yj = List2[,paste("L", j, sep = '')]
qhat = try(get(paste0("qhat_", func))(List.train = List1, List.test = List2, K, i, j, eps = eps), silent = TRUE)
class(qhat)
q12 = qhat$q12
q1 = pmin(pmax(q12, qhat$q1), 1)
q2 = pmin(qhat$q2, 1 + q12 - q1, 1)
plot(q120[permutset[sbset]], q12)
plot(q10[permutset[sbset]], q1)
plot(q20[permutset[sbset]], q2)
q2 = pmax(q12/q1, pmin(qhat$q2, 1 + q12 - q1, 1))
plot(q120[permutset[sbset]], q12)
plot(q10[permutset[sbset]], q1)
plot(q20[permutset[sbset]], q2)
gammainvhat = q1*q2/q12
phihat = gammainvhat*(yj/q2 + yi/q1 - yi*yj/q12) - psiinvhat
gammainvhat = q1*q2/q12
psiinvhat = mean(gammainvhat)
phihat = gammainvhat*(yj/q2 + yi/q1 - yi*yj/q12) - psiinvhat
Qnphihat = mean(phihat + gammainvhat, na.rm = TRUE)
psiinvhat
Qnphihat
summary(phihat)
func = "logit"
qhat = try(get(paste0("qhat_", func))(List.train = List1, List.test = List2, K, i, j, eps = eps), silent = TRUE)
class(qhat)
q12 = qhat$q12
q1 = pmin(pmax(q12, qhat$q1), 1)
q2 = pmax(q12/q1, pmin(qhat$q2, 1 + q12 - q1, 1))
plot(q120[permutset[sbset]], q12)
plot(q10[permutset[sbset]], q1)
plot(q20[permutset[sbset]], q2)
gammainvhat = q1*q2/q12
psiinvhat = mean(gammainvhat)
phihat = gammainvhat*(yj/q2 + yi/q1 - yi*yj/q12) - psiinvhat
Qnphihat = mean(phihat + gammainvhat, na.rm = TRUE)
psiinvhat
Qnphihat
summary(phihat)
func = "ranger"
eps
qhat = try(get(paste0("qhat_", func))(List.train = List1, List.test = List2, K, i, j, eps = eps), silent = TRUE)
class(qhat)
q12 = qhat$q12
q1 = pmin(pmax(q12, qhat$q1), 1)
q2 = pmax(q12/q1, pmin(qhat$q2, 1 + q12 - q1, 1))
plot(q120[permutset[sbset]], q12)
plot(q10[permutset[sbset]], q1)
plot(q20[permutset[sbset]], q2)
gammainvhat = q1*q2/q12
psiinvhat = mean(gammainvhat)
phihat = gammainvhat*(yj/q2 + yi/q1 - yi*yj/q12) - psiinvhat
Qnphihat = mean(phihat + gammainvhat, na.rm = TRUE)
psiinvhat
Qnphihat
summary(phihat)
eps = 0.005
qhat = try(get(paste0("qhat_", func))(List.train = List1, List.test = List2, K, i, j, eps = eps), silent = TRUE)
class(qhat)
q12 = qhat$q12
q1 = pmin(pmax(q12, qhat$q1), 1)
q2 = pmax(q12/q1, pmin(qhat$q2, 1 + q12 - q1, 1))
plot(q120[permutset[sbset]], q12)
plot(q10[permutset[sbset]], q1)
plot(q20[permutset[sbset]], q2)
gammainvhat = q1*q2/q12
psiinvhat = mean(gammainvhat)
phihat = gammainvhat*(yj/q2 + yi/q1 - yi*yj/q12) - psiinvhat
Qnphihat = mean(phihat + gammainvhat, na.rm = TRUE)
psiinvhat
Qnphihat
summary(phihat)
func = "logit"
qhat = try(get(paste0("qhat_", func))(List.train = List1, List.test = List2, K, i, j, eps = eps), silent = TRUE)
class(qhat)
q12 = qhat$q12
q1 = pmin(pmax(q12, qhat$q1), 1)
q2 = pmax(q12/q1, pmin(qhat$q2, 1 + q12 - q1, 1))
plot(q120[permutset[sbset]], q12)
plot(q10[permutset[sbset]], q1)
plot(q20[permutset[sbset]], q2)
gammainvhat = q1*q2/q12
psiinvhat = mean(gammainvhat)
phihat = gammainvhat*(yj/q2 + yi/q1 - yi*yj/q12) - psiinvhat
Qnphihat = mean(phihat + gammainvhat, na.rm = TRUE)
psiinvhat
Qnphihat
summary(phihat)
summary(gammainvhat*cbind(yj/q2, yi/q1, - yi*yj/q12))
func
qhat = try(get(paste0("qhat_", func))(List.train = List1, List.test = List2, K, i, j, eps = eps), silent = TRUE)
class(qhat)
q12 = qhat$q12
q1 = pmin(pmax(q12, qhat$q1), 1)
q2 = pmax(q12/q1, pmin(qhat$q2, 1 + q12 - q1, 1))
plot(q120[permutset[sbset]], q12)
plot(q10[permutset[sbset]], q1)
plot(q20[permutset[sbset]], q2)
gammainvhat = q1*q2/q12
psiinvhat = mean(gammainvhat)
phihat = gammainvhat*(yj/q2 + yi/q1 - yi*yj/q12) - psiinvhat
Qnphihat = mean(phihat + gammainvhat, na.rm = TRUE)
psiinvhat
Qnphihat
summary(phihat)
summary(gammainvhat*cbind(yj/q2, yi/q1, - yi*yj/q12))
func = "rangerlogit"
qhat = try(get(paste0("qhat_", func))(List.train = List1, List.test = List2, K, i, j, eps = eps), silent = TRUE)
class(qhat)
q12 = qhat$q12
q1 = pmin(pmax(q12, qhat$q1), 1)
q2 = pmax(q12/q1, pmin(qhat$q2, 1 + q12 - q1, 1))
plot(q120[permutset[sbset]], q12)
plot(q10[permutset[sbset]], q1)
plot(q20[permutset[sbset]], q2)
gammainvhat = q1*q2/q12
psiinvhat = mean(gammainvhat)
phihat = gammainvhat*(yj/q2 + yi/q1 - yi*yj/q12) - psiinvhat
Qnphihat = mean(phihat + gammainvhat, na.rm = TRUE)
psiinvhat
Qnphihat
summary(phihat)
summary(gammainvhat*cbind(yj/q2, yi/q1, - yi*yj/q12))
length(gammainvhat)
length(yi)
length(yj)
length(yq1)
length(q1)
length(q2)
gammainvhat*cbind(yj/q2, yi/q1, - yi*yj/q12)
cbind(yj/q2, yi/q1, - yi*yj/q12)
cbind(yj/q2, yi/q1, - yi*yj/q12)*gammainvhat
(yj/q2+ yi/q1 - yi*yj/q12)*gammainvhat
summary(cbind(gammainvhat*yj/q2, gammainvhat*yi/q1, - gammainvhat*yi*yj/q12))
eps
eps = 0.01
qhat = try(get(paste0("qhat_", func))(List.train = List1, List.test = List2, K, i, j, eps = eps), silent = TRUE)
class(qhat)
q12 = qhat$q12
q1 = pmin(pmax(q12, qhat$q1), 1)
q2 = pmax(q12/q1, pmin(qhat$q2, 1 + q12 - q1, 1))
plot(q120[permutset[sbset]], q12)
plot(q10[permutset[sbset]], q1)
plot(q20[permutset[sbset]], q2)
gammainvhat = q1*q2/q12
psiinvhat = mean(gammainvhat)
phihat = gammainvhat*(yj/q2 + yi/q1 - yi*yj/q12) - psiinvhat
Qnphihat = mean(phihat + gammainvhat, na.rm = TRUE)
psiinvhat
Qnphihat
summary(phihat)
summary(cbind(gammainvhat*yj/q2, gammainvhat*yi/q1, - gammainvhat*yi*yj/q12))
ld = simuldata2(n = 3000, l = 1, ep = -1)
List_matrix = ld$List_matrix
p1 = apply(List_matrix[,-c(1:2)], 1, ld$pi1)
p2 = apply(List_matrix[,-c(1:2)], 1, ld$pi2)
gam = 1 - (1 - p1)*(1 - p2)
q10 = p1/gam
q20 = p2/gam
q120 = p1*p2/gam
K = 2
l = ncol(List_matrix) - K
n = nrow(List_matrix)
p1 = apply(as.matrix(List_matrix[,-c(1:2)]), 1, ld$pi1)
p2 = apply(as.matrix(List_matrix[,-c(1:2)]), 1, ld$pi2)
gam = 1 - (1 - p1)*(1 - p2)
q10 = p1/gam
q20 = p2/gam
q120 = p1*p2/gam
K = 2
l = ncol(List_matrix) - K
n = nrow(List_matrix)
nfolds = 2
eps = 0
func = "rangerlogit"
List_matrix = na.omit(List_matrix)
List_matrix = as.data.frame(List_matrix)
#N = number of observed or captured units
N = nrow(List_matrix)
#renaming the columns of List_matrix for ease of use
colnames(List_matrix) = c(paste("L", 1:K, sep = ''), paste("x", 1:(ncol(List_matrix) - K), sep = ''))
psiinv_summary = matrix(0, nrow = K*(K - 1)/2, ncol = 3*length(funcname))
rownames(psiinv_summary) = unlist(sapply(1:(K - 1), function(k) {
sapply((k + 1):K, function(s) {
return(paste0(k, ",", s))
})}))
colnames(psiinv_summary) = paste(rep(funcname, each = 3), c("PI", "DR", "TMLE"), sep = '.')
var_summary = psiinv_summary
ifvals = matrix(NA, nrow = N*K*(K-1)/2, ncol = length(funcname))
colnames(ifvals) = funcname
rownames(ifvals) = rep(rownames(psiinv_summary), each = N)
nuis = matrix(NA, nrow = N*K*(K-1)/2, ncol = 3*length(funcname))
colnames(nuis) = paste(rep(funcname, each = 3), c("q12", "q1", "q2"), sep = '.')
rownames(nuis) = rownames(ifvals)
nuistmle = nuis
permutset = sample(1:N, N, replace = FALSE)
i = 1; j = 2
eps
ld = simuldata2(n = 3000, l = 1, ep = -1)
List_matrix = ld$List_matrix
p1 = apply(as.matrix(List_matrix[,-c(1:2)]), 1, ld$pi1)
p2 = apply(as.matrix(List_matrix[,-c(1:2)]), 1, ld$pi2)
gam = 1 - (1 - p1)*(1 - p2)
q10 = p1/gam
q20 = p2/gam
q120 = p1*p2/gam
K = 2
l = ncol(List_matrix) - K
n = nrow(List_matrix)
nfolds = 2
eps = 0.005
func = "rangerlogit"
List_matrix = na.omit(List_matrix)
List_matrix = as.data.frame(List_matrix)
#N = number of observed or captured units
N = nrow(List_matrix)
#renaming the columns of List_matrix for ease of use
colnames(List_matrix) = c(paste("L", 1:K, sep = ''), paste("x", 1:(ncol(List_matrix) - K), sep = ''))
psiinv_summary = matrix(0, nrow = K*(K - 1)/2, ncol = 3*length(funcname))
rownames(psiinv_summary) = unlist(sapply(1:(K - 1), function(k) {
sapply((k + 1):K, function(s) {
return(paste0(k, ",", s))
})}))
colnames(psiinv_summary) = paste(rep(funcname, each = 3), c("PI", "DR", "TMLE"), sep = '.')
var_summary = psiinv_summary
ifvals = matrix(NA, nrow = N*K*(K-1)/2, ncol = length(funcname))
colnames(ifvals) = funcname
rownames(ifvals) = rep(rownames(psiinv_summary), each = N)
nuis = matrix(NA, nrow = N*K*(K-1)/2, ncol = 3*length(funcname))
colnames(nuis) = paste(rep(funcname, each = 3), c("q12", "q1", "q2"), sep = '.')
rownames(nuis) = rownames(ifvals)
nuistmle = nuis
permutset = sample(1:N, N, replace = FALSE)
i = 1; j = 2
psiinvmat = matrix(numeric(0), nrow = nfolds, ncol = 3*length(funcname))
colnames(psiinvmat) = paste(rep(funcname, each = 3), c("PI", "DR", "TMLE"), sep = '.')
varmat = psiinvmat
ifvalsfold = matrix(numeric(0), nrow = N, ncol = length(funcname))
colnames(ifvalsfold) = funcname
nuisfold = matrix(numeric(0), nrow = N, ncol = 3*length(funcname))
colnames(nuisfold) = paste(rep(funcname, each = 3), c("q12", "q1", "q2"), sep = '.')
nuistmlefold = nuisfold
folds = 1
if(nfolds == 1){
List1 = List_matrix
List2 = List1
sbset = 1:N
}else{
sbset = ((folds - 1)*ceiling(N/nfolds) + 1):(folds*ceiling(N/nfolds))
sbset = sbset[sbset <= N]
List1 = List_matrix[permutset[-sbset],]
List2 = List_matrix[permutset[sbset],]
}
yi = List2[,paste("L", i, sep = '')]
yj = List2[,paste("L", j, sep = '')]
qhat = try(get(paste0("qhat_", func))(List.train = List1, List.test = List2, K, i, j, eps = eps), silent = TRUE)
class(qhat)
q12 = qhat$q12
q1 = pmin(pmax(q12, qhat$q1), 1)
q2 = pmax(q12/q1, pmin(qhat$q2, 1 + q12 - q1, 1))
plot(q120[permutset[sbset]], q12)
plot(q10[permutset[sbset]], q1)
plot(q20[permutset[sbset]], q2)
gammainvhat = q1*q2/q12
psiinvhat = mean(gammainvhat)
phihat = gammainvhat*(yj/q2 + yi/q1 - yi*yj/q12) - psiinvhat
Qnphihat = mean(phihat + gammainvhat, na.rm = TRUE)
psiinvhat
Qnphihat
summary(phihat)
summary(cbind(gammainvhat*yj/q2, gammainvhat*yi/q1, - gammainvhat*yi*yj/q12))
ld$psi0
1/Qnphihat
eps = 0.00
func = "rangerlogit"
List_matrix = na.omit(List_matrix)
List_matrix = as.data.frame(List_matrix)
#N = number of observed or captured units
N = nrow(List_matrix)
#renaming the columns of List_matrix for ease of use
colnames(List_matrix) = c(paste("L", 1:K, sep = ''), paste("x", 1:(ncol(List_matrix) - K), sep = ''))
psiinv_summary = matrix(0, nrow = K*(K - 1)/2, ncol = 3*length(funcname))
rownames(psiinv_summary) = unlist(sapply(1:(K - 1), function(k) {
sapply((k + 1):K, function(s) {
return(paste0(k, ",", s))
})}))
colnames(psiinv_summary) = paste(rep(funcname, each = 3), c("PI", "DR", "TMLE"), sep = '.')
var_summary = psiinv_summary
ifvals = matrix(NA, nrow = N*K*(K-1)/2, ncol = length(funcname))
colnames(ifvals) = funcname
rownames(ifvals) = rep(rownames(psiinv_summary), each = N)
nuis = matrix(NA, nrow = N*K*(K-1)/2, ncol = 3*length(funcname))
colnames(nuis) = paste(rep(funcname, each = 3), c("q12", "q1", "q2"), sep = '.')
rownames(nuis) = rownames(ifvals)
nuistmle = nuis
permutset = sample(1:N, N, replace = FALSE)
i = 1; j = 2
psiinvmat = matrix(numeric(0), nrow = nfolds, ncol = 3*length(funcname))
colnames(psiinvmat) = paste(rep(funcname, each = 3), c("PI", "DR", "TMLE"), sep = '.')
varmat = psiinvmat
ifvalsfold = matrix(numeric(0), nrow = N, ncol = length(funcname))
colnames(ifvalsfold) = funcname
nuisfold = matrix(numeric(0), nrow = N, ncol = 3*length(funcname))
colnames(nuisfold) = paste(rep(funcname, each = 3), c("q12", "q1", "q2"), sep = '.')
nuistmlefold = nuisfold
folds = 1
if(nfolds == 1){
List1 = List_matrix
List2 = List1
sbset = 1:N
}else{
sbset = ((folds - 1)*ceiling(N/nfolds) + 1):(folds*ceiling(N/nfolds))
sbset = sbset[sbset <= N]
List1 = List_matrix[permutset[-sbset],]
List2 = List_matrix[permutset[sbset],]
}
yi = List2[,paste("L", i, sep = '')]
yj = List2[,paste("L", j, sep = '')]
qhat = try(get(paste0("qhat_", func))(List.train = List1, List.test = List2, K, i, j, eps = eps), silent = TRUE)
class(qhat)
q12 = qhat$q12
q1 = pmin(pmax(q12, qhat$q1), 1)
q2 = pmax(q12/q1, pmin(qhat$q2, 1 + q12 - q1, 1))
plot(q120[permutset[sbset]], q12)
plot(q10[permutset[sbset]], q1)
plot(q20[permutset[sbset]], q2)
gammainvhat = q1*q2/q12
sum(q2<q12)
sum(q2<=q12)
set.seed(1234)
funcname = c("rangerlogit", "logit", "ranger")
result = numeric(0)
n = 5000
for(s in 1:100){
print(s)
ld = simuldata2(n = n, l = 1, ep = -1)
listdata = ld$List_matrix
listdata2 = ld$List_matrix_xstar
p1 = psinhat(listdata, funcname = funcname, nfolds = 2, iter = 250, eps_stop = 0.001)
p2 = psinhat(listdata2, funcname = funcname, nfolds = 2, iter = 250, eps_stop = 0.001)
result = rbind(result, cbind(t(p1$n), t(p1$varn), "x"),
cbind(t(p1$n), t(p1$varn), "x*"))
}
result2 = cbind(rownames(result), result)
library(plyr)
library(tidyr)
library(dplyr)
library(ggplot2)
result2 = as.data.frame(result2)
colnames(result2) = c("Var1", "n", "varn", "covariate")
result2$n = as.numeric(as.character(result2$n))
result2$varn = as.numeric(as.character(result2$varn))
result2$biasn = result2$n - n
ggplot(result2, aes(x = biasn, fill = Var1)) + geom_density(alpha = 0.3)
result3 = ddply(result2, c("Var1", "covariate"), summarise,
bias = median(abs(biasn)),
rmse = sqrt(median(biasn^2 + varn)))
result3 = result3 %>% separate(Var1, c("model", "method"))
ggplot(result3 %>% filter(model != "rangerj"), aes(x = model, y = bias, fill = method)) +
geom_bar(stat = "identity", position = position_dodge()) +
facet_wrap(~covariate) +
scale_fill_manual("Estimation method", values = c("PI" = "red", "DR" = "#E69F00", "TMLE" = "#56B4E9"))
ggplot(result3 %>% filter(model != "rangerj"), aes(x = model, y = rmse, fill = method)) +
geom_bar(stat = "identity", position = position_dodge()) +
facet_wrap(~covariate) +
scale_fill_manual("Estimation method", values = c("PI" = "red", "DR" = "#E69F00", "TMLE" = "#56B4E9"))

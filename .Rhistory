pestim = rbind(pestim, pall)
}
beep(sound = 10)
print(summary(pall))
}
#print(s)
################## generating data and calculating psi, n estimates
datap = dat_p_K(n0, K, l)
List_matrix = datap$List_matrix_xstar
#       List_matrix = List_matrix[colSums(List_matrix[,1:K])>0,]
estim = estim_multi_risk(List_matrix, K, l, beta_vec, actual = FALSE, func = func, risk_alpha = risk_alpha, i = 1, j = 2, risk_min = risk_min, risk_max = risk_max, alpha = alpha, sigma = sigma, length = length)
n = nrow(List_matrix)
l = ncol(List_matrix) - K
List_matrix = na.omit(List_matrix)
#removing all rows with only 0's
List_matrix_cov = List_matrix[which(rowSums(List_matrix[,1:K]) > 0),]
colnames(List_matrix_cov) = c(paste("L", 1:K, sep = ''), paste("x", 1:l, sep = ''))
#N = number of observed or captured units
N = nrow(List_matrix_cov)
set1 = sample(N, ceiling(N/2), replace = FALSE)
List1 = as.data.frame(List_matrix_cov[set1,])
List2 = as.data.frame(List_matrix_cov[-set1,])
pp = phihat_risk(List1, List2, K = K, func = func, i = i, j = j, risk_alpha = risk_alpha, risk_min = risk_min, risk_max = risk_max, length = length)
class(pp)
pp
l = ncol(List1) - K
conforminglists = apply(List1[,1:K], 2, function(col){return(setequal(col, c(0,1)))})
if(sum(conforminglists) < 2){
print("Data is not in the required format or lists are degenerate.")
return(NULL)
}
if(sum(conforminglists) < K){
cat("Lists ", which(conforminglists == FALSE), " are not in the required format.\n")
}
risk_alpha_min = max(min(risk_alpha, 1/risk_alpha), risk_min, na.rm = TRUE)
risk_alpha_max = min(max(risk_alpha, 1/risk_alpha), risk_max, na.rm = TRUE)
delta_vec = unique(seq(risk_alpha_min, risk_alpha_max, length.out = length))
delta_vec
#renaming the columns of List_matrix for ease of use
colnames(List1) = c(paste("L", 1:K, sep = ''), paste("x", 1:(ncol(List_matrix) - K), sep = ''))
colnames(List2) = colnames(List1)
psiinv_pi = matrix(0, ncol = length(delta_vec), nrow = 1)
colnames(psiinv_pi) = delta_vec
psiinv_bc = psiinv_pi
psiinv_tmle = psiinv_pi
phi_bc = matrix(0, ncol = length(delta_vec), nrow = nrow(List2))
colnames(phi_bc) = colnames(psiinv_pi)
phi_tmle = phi_bc
yi = List2[,paste("L", i, sep = '')]
yj = List2[,paste("L", j, sep = '')]
#colsubset = stringr::str_subset(colnames(psiinv_summary), func)
qhat = try(get(paste0("qhat_", func))(List1, List2, K, i, j, eps), silent = TRUE)
class(qhat)
qhat_sl()
qhat_sl
slib = c("SL.glm"
, "SL.gam"
, "SL.glm.interaction"
)
slib1 = c("SL.glmnet"
,"SL.ranger"
#, "SL.gbm"
)
slib2 <- c(slib1, slib,
split(rbind(slib,"screen.corP"),
rep(1:length(slib),each=2)) ,
split(rbind(slib,"screen.glmnet"),
rep(1:length(slib),each=2)) )
fiti = try(SuperLearner::SuperLearner(Y = as.numeric(List1[,i]),
X = as.data.frame(List1[,-c(1:K)]),
family = binomial(), SL.library = slib2, verbose = FALSE), silent = TRUE)
fitj = try(SuperLearner::SuperLearner(Y = as.numeric(List1[,j]),
X = as.data.frame(List1[,-c(1:K)]),
family = binomial(), SL.library = slib2, verbose = FALSE), silent = TRUE)
fitij = try(SuperLearner::SuperLearner(Y = as.numeric(pmin(List1[,i], List1[,j])),
X = as.data.frame(List1[,-c(1:K)]),
family = binomial(), SL.library = slib2, verbose = FALSE), silent = TRUE)
fiti
class(fiti)
class(fitj)
class(fitij)
qhat_sl = function(List1, List2, K, i, j, eps){
require("SuperLearner")
require("glmnet")
require("gam")
require("ranger")
require("rpart")
slib = c("SL.glm"
, "SL.gam"
, "SL.glm.interaction"
)
slib1 = c("SL.glmnet"
,"SL.ranger"
#, "SL.gbm"
)
slib2 <- c(slib1, slib,
split(rbind(slib,"screen.corP"),
rep(1:length(slib),each=2)) ,
split(rbind(slib,"screen.glmnet"),
rep(1:length(slib),each=2)) )
#suppressWarnings()
fiti = try(SuperLearner(Y = as.numeric(List1[,i]),
X = as.data.frame(List1[,-c(1:K)]),
family = binomial(), SL.library = slib2, verbose = FALSE), silent = TRUE)
fitj = try(SuperLearner(Y = as.numeric(List1[,j]),
X = as.data.frame(List1[,-c(1:K)]),
family = binomial(), SL.library = slib2, verbose = FALSE), silent = TRUE)
fitij = try(SuperLearner(Y = as.numeric(pmin(List1[,i], List1[,j])),
X = as.data.frame(List1[,-c(1:K)]),
family = binomial(), SL.library = slib2, verbose = FALSE), silent = TRUE)
if("try_error" %in% c(class(fiti), class(fitj), class(fitij))){
Warning("One or more fits with SuperLearner regression failed.")
return(NULL)
}else{
q12 = pmax(pmin(
predict(fitij, newdata = List2[,-c(1:K)], onlySL = TRUE)$pred, 1), eps)
q1 = pmin(pmax(
predict(fiti, newdata = List2[,-c(1:K)], onlySL = TRUE)$pred, q12), 1)
q2 = pmin(pmax(
predict(fitj, newdata = List2[,-c(1:K)], onlySL = TRUE)$pred, q12), 1)
}
return(list(q1 = q1, q2 = q2, q12 = q12))
}
#colsubset = stringr::str_subset(colnames(psiinv_summary), func)
qhat = try(get(paste0("qhat_", func))(List1, List2, K, i, j, eps), silent = TRUE)
L
K
i
j
eps
eps = 0.05
#colsubset = stringr::str_subset(colnames(psiinv_summary), func)
qhat = try(get(paste0("qhat_", func))(List1, List2, K, i, j, eps), silent = TRUE)
class(qhat)
#colsubset = stringr::str_subset(colnames(psiinv_summary), func)
qhat = get(paste0("qhat_", func))(List1, List2, K, i, j, eps)
func
func = "sl"
#colsubset = stringr::str_subset(colnames(psiinv_summary), func)
qhat = get(paste0("qhat_", func))(List1, List2, K, i, j, eps)
class(qhat)
library(reshape2)
library(ggplot2)
library(dplyr)
library(ggpubr)
library(glue)
library(colorspace)
library(beepr)
n0 = 5000
K = 2
l = 3
source("C:/Users/manja/Dropbox/capture_recapture/codes/multi_list/simulation_multi_list_risk.R")
#source("C:/Users/manja/Dropbox/capture_recapture/codes/multi_list/functions_multi_psi_theta_new_notation.R")
source("C:/Users/manja/Dropbox/capture_recapture/codes/multi_list/functions_multilist2.R")
func = "sl"
length = 15
risk_alpha = 1.5
risk_min = 0.5
risk_max = 1.125
#n_vec= c(1000, 5000, 10000, 15000, 20000)
#n_vec= c(25000, 30000, 35000, 40000, 45000)
n_vec = 5000#c(1:3)*1000
psi0
cvrgprob_vec = c(0.95)
# data table to store the estimated values
pestim = numeric(0)
for(n0 in n_vec){print(n0)
for(s in 1:300){print(s)
#print(s)
################## generating data and calculating psi, n estimates
datap = dat_p_K(n0, K, l)
List_matrix = datap$List_matrix_xstar
#       List_matrix = List_matrix[colSums(List_matrix[,1:K])>0,]
estim = estim_multi_risk(List_matrix, K, l, beta_vec, actual = FALSE, func = func, risk_alpha = risk_alpha, i = 1, j = 2, risk_min = risk_min, risk_max = risk_max, alpha = alpha, sigma = sigma, length = length)
p1 = melt(estim$psimat, value.name = "psi")
p2 = melt(estim$sigma2mat, value.name = "sigma2")
p3 = melt(estim$nmat, value.name = "n")
p4 = melt(estim$sigma2n, value.name = "sigma2n")
pall = merge(p1, merge(p2, merge(p3, p4, by = c("Var1", "Var2")), by = c("Var1", "Var2")), by = c("Var1", "Var2"))
colnames(pall)[1:2] = c("delta", "model")
pall$n0 = n0
pall$N = estim$N
pestim = rbind(pestim, pall)
}
beep(sound = 10)
print(summary(pall))
}
if(FALSE){
beep(sound = 8)
psi = matrix(NA, nrow = length(beta_vec), ncol = 3)
psi[,1] = beta_vec
colnames(psi) = c("beta", "psi0_l", "psi0_u")
xmat = matrix(rnorm(n0*l, 2, 1), ncol = l)
psi_risk = function(delta){
pmax(pmin(1/mean(apply(xmat, 1, function(x) {
gammax = 1 - (1 - pi1(x))*(1 - pi2(x))*(1 - pi3(x))*(1 - pi4_0(x))
q1 = pi3(x)
q2 = pi3(x)*pi4_1(x) + (1 - pi3(x))*pi4_0(x)
q12 = pi3(x)*pi4_1(x)
return((delta*(q1-q12) + q12)*q2/q12)
})), 1), 0)
}
psi[,"psi0_u"] = psi_risk(1/risk_alpha)
psi[,"psi0_l"] = psi_risk(risk_alpha)
pestim = merge(pestim, psi, by = "beta", all.x = TRUE)
}
pc = pestim
pc$psi0 = psi0
pc$biaspsi = abs(pc$psi - pc$psi0)
pc$biasn = abs(pc$n - pc$N/pc$psi0)
pc$varpsi = pc$sigma2/pc$N*pc$psi^4
pc$cvrgpsi = abs(pc$biaspsi) < 1.95*sqrt(pc$varpsi)
pc$cvrgn = abs(pc$biasn) < 1.95*sqrt(pc$sigma2n)
pc$cvrgpsi = (psi0 < pc$psi + 1.95*sqrt(pc$varpsi))*(psi0 > pc$psi - 1.95*sqrt(pc$varpsi))
pc$cvrgn = (pc$n0 < pc$n + 1.95*sqrt(pc$sigma2n))*(pc$n0 > pc$n - 1.95*sqrt(pc$sigma2n))
pc = aggregate(cbind(psi, varpsi, n, sigma2n, biaspsi, biasn, cvrgpsi, cvrgn, psi0)~delta + model + n0, data = pc, mean)
color1 = "red"
color2 = "#E69F00"
color3 = "dodgerblue1" #  "#56B4E9"
lsize = 1
tsize = 16
gbasic = ggplot(pc, aes(x = delta, color = model, fill = model)) +
scale_color_manual(values = c("PI" = color1, "BC" = color2, "TMLE" = color3)) +
scale_fill_manual(values = c("PI" = color1, "BC" = color2, "TMLE" = color3)) +
ylab(NULL) +
facet_wrap(~n0) +
labs(x = "risk_ratio") +
theme_bw() +
theme(text = element_text(size = tsize)) +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90))
g1 = gbasic + geom_line(aes(y = biasn), size = lsize) +
ggtitle("Bias of n")
g2 = gbasic + geom_line(aes(y = cvrgn), size = lsize) +
ggtitle("Coverage of n")
g3 = gbasic +
geom_line(aes(y = n + 1.95*sqrt(sigma2n)), size = lsize) +
geom_line(aes(y = n - 1.95*sqrt(sigma2n)), size = lsize) +
geom_line(aes(y = n0), linetype = "dashed", color = "black") +
ggtitle('95% CI of n')
g4 = gbasic + geom_line(aes(y = biaspsi), size = lsize) +
ggtitle("Bias of psi")
g5 = gbasic + geom_line(aes(y = cvrgpsi), size = lsize) +
ggtitle("Coverage of psi")
g6 = gbasic +
#  geom_ribbon(data = .%>% filter(variable == "max"), aes(ymin = n0, ymax = n + nq*nsd), alpha = 0.3, show.legend = FALSE) +
#  geom_ribbon(data = .%>% filter(variable == "min"), aes(ymin = n0, ymax = n - nq*nsd), alpha = 0.3, show.legend = FALSE) +
geom_line(aes(y = psi + 1.95*sqrt(varpsi)), size = lsize) +
geom_line(aes(y = psi - 1.95*sqrt(varpsi)), size = lsize) +
geom_line(aes(y = psi0), linetype = "dashed", color = "black") +
#ggtitle(glue("95% CI of psi"))
labs(title = substitute(paste('95% CI of ', psi, ', true ', psi, ' = ', var), list(var = round(psi0, 2))))
ggall = ggarrange(g1, g2, g3, g4, g5, g6, ncol = 3, nrow = 2, common.legend = TRUE, legend = "bottom")
ggall = annotate_figure(ggall, top = text_grob(paste("Summary for capture probability", round(psi0, 2)), size = 15))
ggall
ggall
usethis::use_readme_rmd()
usethis::use_readme_md()
``` r
library(crctmle)
## basic example code
```
devtools::document()
devtools::build_readme()
devtools::document()
devtools::document()
The goal of crctmle is to provide users doubly-robust and efficient estimates of population size and the variances for a capture-recapture problem.
qhat_sl
tmle = function(datmat, iter = 100, eps = 0.005, eps_stop = 0.00001, twolist = FALSE, K = 2){
if(!prod(c("yi", "yj", "yij", "q10", "q02", "q12") %in% colnames(datmat))){
stop("datmat misses one or more of the following columns: \t (yi, yj, yij, q10, q02, q12).")
return(list(error = TRUE))
}
expit = function(x) {
exp(x)/(1 + exp(x))
}
logit = function(x) {
log(x/(1 - x))
}
epsilon_error = 1
cnt = 0
while (abs(epsilon_error) > eps_stop){
cnt = cnt + 1
if (cnt > iter){break}
########################### model 1 for q12
dat1 = cbind(datmat$yij, logit(datmat$q12), (datmat$q10 + datmat$q12)/datmat$q12
+ (datmat$q02 + datmat$q12)/datmat$q12
- (datmat$q10 + datmat$q12)*(datmat$q02 + datmat$q12)/datmat$q12^2 )
colnames(dat1) = c("yij", "logitq12", "ratio")
dat1 = as.data.frame(dat1)
mod1 = try(glm(yij ~ -1 + offset(logitq12) + ratio
, family = binomial(link = logit), data = dat1, na.action = na.omit))
if (class(mod1) != "try-error"){
datmat[,"q12"] = predict(mod1, newdata = dat1, type = "response")
}
datmat$q12 = pmax(pmin(datmat$q12, 1), eps)
########################### model 2 for q1
dat2 = cbind(datmat$yi*(1 - datmat$yj), logit(datmat$q10), (datmat$q02 + datmat$q12)/datmat$q12)
colnames(dat2) = c("yi0", "logitq10", "ratio")
dat2 = as.data.frame(dat2)
mod2 = try(glm(yi0 ~ -1 + offset(logitq10) + ratio, family = binomial(link = logit), data = dat2, na.action = na.omit))
if (class(mod2) != "try-error"){
datmat$q10 = predict(mod2, newdata = dat2, type = "response")
datmat[,"q10"] = pmin(datmat[,"q10"], 1 - datmat$q12)
}
datmat$q10 = pmax(pmin(datmat$q10, 1), eps)
########################### model 3 for q2
if (K > 2 | twolist == FALSE){
dat3 = cbind(datmat$yj*(1 - datmat$yi), logit(datmat$q02), (datmat$q10 + datmat$q12)/datmat$q12)
colnames(dat3) = c("y0j", "logitq02", "ratio")
dat3 = as.data.frame(dat3)
mod3 = try(glm(y0j ~ -1 + offset(logitq02) + ratio, family = binomial(link = logit), data = dat3, na.action = na.omit))
if (class(mod3) != "try-error"){
datmat$q02 = predict(mod3, newdata = dat3, type = "response")
datmat[,"q02"] = pmin(datmat[,"q02"], 1 - datmat$q10 - datmat$q12)
}
}else{
mod3 = mod2
datmat[,"q02"] = pmax(0, 1 - datmat$q10 - datmat$q12)
}
datmat$q02 = pmax(pmin(datmat$q02, 1), eps)
epsilon_error = max(abs(c(mod2$coefficients, mod3$coefficients, mod1$coefficients)))
}
return(list(error = epsilon_error > 1, datmat = datmat))
}
List_matr
List_matrix = datacrc
data = matrix(sample(c(0,1), 2000, replace = TRUE), ncol = 2)
x = matrix(rnorm(nrow(data)*3, 2,1), nrow = nrow(data))
datacrc = cbind(data, x)
List_matrix = datacrc
psinhat(List_matrix)
traceback()
#' data = matrix(sample(c(0,1), 2000, replace = TRUE), ncol = 2)
#' x = matrix(rnorm(nrow(data)*3, 2,1), nrow = nrow(data))
#'
#' psin_estimate = psinhat(List_matrix = data)
#' #this returns the basic plug-in estimate since covariates are absent.
#'
#' data = cbind(data, x)
#' psin_estimate = psinhat(List_matrix = data, funcname = c("logit", "sl"), nfolds = 2, twolist = FALSE, eps = 0.005)
#' #this returns the plug-in, the bias-corrected and the tmle estimate for the two models
#' @export
psinhat = function(List_matrix, K = 2, funcname = c("logit"), nfolds = 5, twolist = FALSE, eps = 0.005, iter = 50){
l = ncol(List_matrix) - K
n = nrow(List_matrix)
stopifnot(!is.null(dim(List_matrix)))
stopifnot(K >= 2)
stopifnot(nrow(List_matrix)>1)
stopifnot(ncol(List_matrix) >= 2)
stopifnot(((ncol(List_matrix) == K)&(nrow(List_matrix)>50)) | (nrow(List_matrix) > 0))
List_matrix = na.omit(List_matrix)
#removing all rows with only 0's
List_matrix = List_matrix[which(rowSums(List_matrix[,1:K]) > 0),]
List_matrix = as.data.frame(List_matrix)
#N = number of observed or captured units
N = nrow(List_matrix)
conforminglists = apply(List_matrix[,1:K], 2, function(col){return(setequal(col, c(0,1)))})
if(sum(conforminglists) < 2){
stop("Data is not in the required format or lists are degenerate.")
return(NULL)
}
if(sum(conforminglists) < K){
Message(cat("Lists ", which(conforminglists == FALSE), " are not in the required format."))
}
if(l == 0){
#renaming the columns of List_matrix for ease of use
colnames(List_matrix) = c(paste("L", 1:K, sep = ''))
psiinv_summary = matrix(0, nrow = K*(K - 1)/2, ncol = 1)
rownames(psiinv_summary) = unlist(sapply(1:(K - 1), function(k) {
sapply((k + 1):K, function(s) {
return(paste(k, ", ", s, sep = ''))
})}))
colnames(psiinv_summary) =  c("PI")
var_summary = psiinv_summary
for(i in 1:(K - 1)){
if(!setequal(List_matrix[,i], c(0,1))){
next
}
for(j in (i + 1):K){
if(!setequal(List_matrix[,j], c(0,1))){
next
}
q1 = mean(List_matrix[,i])
q2 = mean(List_matrix[,j])
q12 = mean(List_matrix[,i]*List_matrix[,j])
psiinv_summary[paste(i, ", ", j, sep = ''),] = q1*q2/q12
var_summary[paste(i, ", ", j, sep = ''),] = q1*q2*(q1*q2 - q12)*(1 - q12)/q12^3/N
}
}
}else{
#renaming the columns of List_matrix for ease of use
colnames(List_matrix) = c(paste("L", 1:K, sep = ''), paste("x", 1:(ncol(List_matrix) - K), sep = ''))
psiinv_summary = matrix(0, nrow = K*(K - 1)/2, ncol = 3*length(funcname))
rownames(psiinv_summary) = unlist(sapply(1:(K - 1), function(k) {
sapply((k + 1):K, function(s) {
return(paste(k, ", ", s, sep = ''))
})}))
colnames(psiinv_summary) = paste(rep(funcname, each = 3), c(" PI", " BC", " TMLE"), sep = '')
var_summary = psiinv_summary
permutset = sample(1:N, N, replace = FALSE)
for(i in 1:(K - 1)){
if(!setequal(List_matrix[,i], c(0,1))){
#     cat("List ", i, " is not in the required format or is degenerate.\n")
next
}
for(j in (i + 1):K){
if(!setequal(List_matrix[,j], c(0,1))){
#       cat("List ", j, " is not in the required format or is degenerate.\n")
next
}
psiinvmat = matrix(NA, nrow = nfolds, ncol = 3*length(funcname))
colnames(psiinvmat) = paste(rep(funcname, each = 3), c(" PI", " BC", " TMLE"), sep = '')
varmat = psiinvmat
for(folds in 1:nfolds){#print(folds)
if(nfolds == 1){
List1 = List_matrix
List2 = List1
}else{
sbset = ((folds - 1)*ceiling(N/nfolds) + 1):(folds*ceiling(N/nfolds))
sbset = sbset[sbset <= N]
List1 = List_matrix[permutset[-sbset],]
List2 = List_matrix[permutset[sbset],]
}
yi = List2[,paste("L", i, sep = '')]
yj = List2[,paste("L", j, sep = '')]
if(mean(List1[,i]*List1[,j]) > eps) {
for (func in funcname){
colsubset = stringr::str_subset(colnames(psiinv_summary), func)
qhat = try(get(paste0("qhat_", func))(List1, List2, K, i, j, eps), silent = TRUE)
if (class(qhat) == "try-error") {
next
}
q12 = qhat$q12
q1 = pmin(pmax(q12, qhat$q1), 1)
q2 = pmax(q12/q1, pmin(qhat$q2, 1 + q12 - q1, 1))
gammainvhat = q1*q2/q12
psiinvhat = mean(gammainvhat, na.rm = TRUE)
phihat = gammainvhat*(yj/q2 + yi/q1 - yi*yj/q12) - psiinvhat
Qnphihat = mean(phihat, na.rm = TRUE)
psiinvhatq = max(psiinvhat + Qnphihat, 1)
psiinvmat[folds, colsubset][1:2] = c(psiinvhat, psiinvhatq)
sigmasq = var(phihat, na.rm = TRUE)
varmat[folds, colsubset][1:2] = sigmasq/N
datmat = as.data.frame(cbind(yi, yj, yi*yj, q1 - q12, q2 - q12, q12))
datmat[,4:6] = cbind(apply(datmat[,4:6], 2, function(u) {return(pmin(pmax(u, eps), 1 - eps))}))
colnames(datmat) = c("yi", "yj", "yij", "q10", "q02", "q12")
tmle = tmle(datmat = datmat, iter = iter, eps = eps, eps_stop = 0.00001, twolist = twolist, K = K)
if(tmle$error){
warning("TMLE did not run or converge.")
psiinvmat[folds,colsubset][3] = NA
varmat[folds,colsubset][3] = NA
}else{
datmat = tmle$datmat
q12 = pmax(datmat$q12, eps)
q1 = pmin(datmat$q12 + datmat$q10, 1)
q2 = pmax(pmin(datmat$q12 + datmat$q02, 1 + q12 - q1, 1), q12/q1)
gammainvhat = q1*q2/q12
psiinvhat = mean(gammainvhat, na.rm = TRUE)
phihat = gammainvhat*(yi/q1 + yj/q2 - yi*yj/q12) - psiinvhat
Qnphihat = mean(phihat, na.rm = TRUE)
psiinvmat[folds,colsubset][3] = psiinvhat
sigmasq = var(phihat, na.rm = TRUE)
varmat[folds,colsubset][3] = sigmasq/N
}
}
}else{
message(cat("Overlap between the lists", i, "and", j, "is less than", eps))
psiinvmat[folds,] = NA
varmat[folds,] = NA
}
}
psiinv_summary[paste(i, ", ", j, sep = ''),] = colMeans(psiinvmat, na.rm = TRUE)
var_summary[paste(i, ", ", j, sep = ''),] = colMeans(varmat, na.rm = TRUE)
}
}
}
return(list(psi = 1/psiinv_summary, sigma2 = N*var_summary,
n = N*psiinv_summary,
varn = N^2*var_summary + N*psiinv_summary*(psiinv_summary - 1),
N = N
))
}
psinhat(List_matrix)
library(crctmle)
data = matrix(sample(c(0,1), 2000, replace = TRUE), ncol = 2)
x = matrix(rnorm(nrow(data)*3, 2,1), nrow = nrow(data))
datacrc = cbind(data, x)
estim <- psinhat(List_matrix = datacrc, func = c("logit"), nfolds = 2, K = 2)
# The population size estimates are obtained by
estim$n
# The corresponding variances are
estim$varn
## basic example code
library(crctmle)
data = matrix(sample(c(0,1), 2000, replace = TRUE), ncol = 2)
x = matrix(rnorm(nrow(data)*3, 2,1), nrow = nrow(data))
datacrc = cbind(data, x)
estim <- psinhat(List_matrix = datacrc, func = c("logit"), nfolds = 2, K = 2)
# The population size estimates are obtained by
estim$n
# The corresponding variances are
estim$varn
devtools::document()
rm(list = c("psinhat", "tmle"))
devtools::document()
devtools::document()
install.packages("c:/Users/manja/OneDrive/Documents/crctmle")
remove.packages("crctmle", lib="~/R/win-library/4.0")
devtools::install_github("mqnjqrid/crctmle")
devtools::install_github("mqnjqrid/crctmle")
library(crctmle)
rm(list = c(qhat_sl))
